{
	"info": {
		"_postman_id": "133cf180-c9cf-4d6b-9834-944dc66f7f0f",
		"name": "Avalanche",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23086587"
	},
	"item": [
		{
			"name": "Admin",
			"item": [
				{
					"name": "alias",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.alias\",\n    \"params\": {\n        \"alias\":\"myAlias\",\n        \"endpoint\":\"bc/X\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"admin"
							]
						},
						"description": "Assign an API an alias, a different endpoint for the API. The original endpoint will still work. This change only affects this node; other nodes will not know about this alias. [More info](https://docs.avax.network/apis/avalanchego/apis/admin#adminalias)"
					},
					"response": []
				},
				{
					"name": "aliasChain",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.aliasChain\",\n    \"params\": {\n        \"chain\":\"{{avalanceBlockchainId}}\",\n        \"alias\":\"myBlockchainAlias\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"admin"
							]
						},
						"description": "Give a blockchain an alias, a different name that can be used any place the blockchain’s ID is used. [More info](https://docs.avax.network/apis/avalanchego/apis/admin#adminaliaschain)"
					},
					"response": []
				},
				{
					"name": "getChainAliases",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.getChainAliases\",\n    \"params\" :{\n        \"chain\":\"2eNy1mUFdmaxXNj1eQHUe7Np4gju9sJsEtWQ4MX3ToiNKuADed\" \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"admin"
							]
						},
						"description": "Dump the mutex statistics of the node to the specified file. [More info](https://docs.avax.network/apis/avalanchego/apis/admin#admingetchainaliases)"
					},
					"response": []
				},
				{
					"name": "getLoggerLevel",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.getLoggerLevel\",\n    \"params\" :{\n        \"loggerName\":\"C\" \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"admin"
							]
						},
						"description": "Returns log and display levels of loggers. [More info](https://docs.avax.network/apis/avalanchego/apis/admin#admingetloggerlevel)"
					},
					"response": []
				},
				{
					"name": "loadVMs",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.loadVMs\",\n    \"params\" :{}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"admin"
							]
						},
						"description": "Dynamically loads any virtual machines installed on the node as plugins. [More info](https://docs.avax.network/build/avalanchego-apis/admin#adminloadvms)"
					},
					"response": []
				},
				{
					"name": "lockProfile",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.lockProfile\",\n    \"params\" :{}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"admin"
							]
						},
						"description": "Dump the mutex statistics of the node to the specified file. [More info](https://docs.avax.network/apis/avalanchego/apis/admin#adminlockprofile)"
					},
					"response": []
				},
				{
					"name": "memoryProfile",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.memoryProfile\",\n    \"params\" :{}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"admin"
							]
						},
						"description": "Dump the mutex statistics of the node to the specified file. [More info](https://docs.avax.network/apis/avalanchego/apis/admin#adminmemoryprofile)"
					},
					"response": []
				},
				{
					"name": "setLoggerLevel",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.setLoggerLevel\",\n    \"params\" :{\n        \"loggerName\": \"C\",\n        \"logLevel\": \"DEBUG\",\n        \"displayLevel\": \"INFO\" \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"admin"
							]
						},
						"description": "Sets log and display levels of loggers. [More info](https://docs.avax.network/apis/avalanchego/apis/admin#adminsetloggerlevel)"
					},
					"response": []
				},
				{
					"name": "startCPUProfiler",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.startCPUProfiler\",\n    \"params\" :{\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"admin"
							]
						},
						"description": "Start profiling the CPU utilization of the node. Will write the profile to the specified file on stop. [More info](https://docs.avax.network/apis/avalanchego/apis/admin#adminstartcpuprofiler)"
					},
					"response": []
				},
				{
					"name": "stopCPUProfiler",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.stopCPUProfiler\",\n    \"params\" :{\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"admin"
							]
						},
						"description": "Stop the CPU profile that was previously started. [More info](https://docs.avax.network/apis/avalanchego/apis/admin#adminstopcpuprofiler)"
					},
					"response": []
				}
			],
			"description": "This API can be used for measuring node health and debugging. [More info](https://docs.avax.network/v1.0/en/api/admin)"
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "newToken",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"auth.newToken\",\n    \"params\": {\n        \"password\":\"{{authPassword}}\",\n        \"endpoints\":[\"/ext/bc/X\", \"/ext/info\"]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/auth",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"auth"
							]
						},
						"description": "Creates a new authorization token that grants access to one or more API endpoints.  \n[More info](https://docs.avax.network/apis/avalanchego/apis/auth#authnewtoken)"
					},
					"response": []
				},
				{
					"name": "revokeToken",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"auth.revokeToken\",\n    \"params\": {\n        \"password\":\"password goes here\",\n        \"token\":\"token goes here\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/auth",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"auth"
							]
						},
						"description": "Revoke a previously generated token. The given token will no longer grant access to any endpoint.  \nIf the token is invalid, does nothing. [More info](https://docs.avax.network/apis/avalanchego/apis/auth#authrevoketoken)"
					},
					"response": []
				},
				{
					"name": "changePassword",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"auth.changePassword\",\n    \"params\": {\n        \"oldPassword\":\"old password goes here\",\n        \"newPassword\":\"new password goes here\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/auth",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"auth"
							]
						},
						"description": "Change this node's authorization token password. Any authorization tokens created under an old password will become invalid. [More info](https://docs.avax.network/apis/avalanchego/apis/auth#authchangepassword)"
					},
					"response": []
				}
			],
			"description": "This API can be used for measuring node health and debugging. [More info](https://docs.avax.network/v1.0/en/api/admin)"
		},
		{
			"name": "AVM",
			"item": [
				{
					"name": "buildGenesis",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\"     : 1,\n    \"method\" : \"avm.buildGenesis\",\n    \"params\" : {\n        \"genesisData\": {\n            \"asset1\": {\n                \"name\": \"asset1\",\n                \"symbol\":\"MFCA\",\n                \"memo\": \"2Zc54v4ek37TEwu4LiV3j41PUMRd6acDDU3ZCVSxE7X\",\n                \"denomination\": 1, \n                \"initialState\": {\n                    \"fixedCap\" : [\n                        {\n                            \"amount\":100000,\n                            \"address\": \"custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p\"\n                        }\n                    ]\n                }\n            },\n            \"asset2\": {\n                \"name\": \"asset2\",\n                \"symbol\":\"MVCA\",\n                \"memo\": \"2Zc54v4ek37TEwu4LiV3j41PUMRd6acDDU3ZCVSxE7X\",\n                \"denomination\": 2, \n                \"initialState\": {\n                    \"variableCap\" : [\n                        {\n                            \"amount\":100000,\n                            \"address\": \"custom18jma8ppw3nhx5r4ap8clazz0dps7rv5u9xde7p\"\n                        }\n                    ]\n                }\n            }\n        },\n        \"networkId\": 1337,\n        \"encoding\":\"cb58\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/vm/avm",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"vm",
								"avm"
							]
						},
						"description": "Given a JSON representation of this Virtual Machine’s genesis state, create the byte representation of that state. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmbuildgenesis)"
					},
					"response": []
				},
				{
					"name": "createAddress - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"avm.createAddress\",\n    \"params\": {\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\" \n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Create a new address controlled by the given user. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmcreateaddress)"
					},
					"response": []
				},
				{
					"name": "createFixedCapAsset - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     : 1,\n    \"method\" :\"avm.createFixedCapAsset\",\n    \"params\" :{\n        \"name\": \"Test Token\",\n        \"symbol\":\"TEST\",\n        \"denomination\": 0,  \n        \"initialHolders\": [\n            {\n                \"address\":\"{{xchainAddress}}\",\n                \"amount\":400\n            }\n        ],\n        \"from\": [\"{{xchainAddress}}\"],\n        \"changeAddr\": \"{{xchainAddress}}\",\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\" \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Create a new fixed-cap, fungible asset. A quantity of it is created at initialization and then no more is ever created. The asset can be sent with `avm.send`. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmcreatefixedcapasset)"
					},
					"response": []
				},
				{
					"name": "createNFTAsset - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     : 1,\n    \"method\" :\"avm.createNFTAsset\",\n    \"params\" :{\n        \"name\":\"Coincert\",\n        \"symbol\":\"TIXX\",\n        \"minterSets\":[\n            {\n                \"minters\":[\n                    \"{{xchainAddress}}\"\n                ],\n                \"threshold\": 1\n            },\n            {\n                \"minters\":[\n                    \"{{xchainAddress}}\"\n                ],\n                \"threshold\": 1\n            }\n        ],\n        \"from\": [\"{{xchainAddress}}\"],\n        \"changeAddr\": \"{{xchainAddress}}\",\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\" \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Create a new non-fungible asset. No units of the asset exist at initialization. Minters can mint units of this asset using `mintTx` and `signMintTx`. The asset can be sent with `avm.sendNFT`. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmcreatenftasset)"
					},
					"response": []
				},
				{
					"name": "createVariableCapAsset - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     : 1,\n    \"method\" :\"avm.createVariableCapAsset\",\n    \"params\" :{\n        \"name\":\"myVariableCapAsset\",\n        \"symbol\":\"MFCA\",\n        \"denomination\": 0,  \n        \"minterSets\":[\n            {\n                \"minters\":[\n                    \"{{xchainAddress}}\"\n                ],\n                \"threshold\": 1\n            }\n        ],\n        \"from\": [\"{{xchainAddress}}\"],\n        \"changeAddr\": \"{{xchainAddress}}\",\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\" \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Create a new variable-cap, fungible asset. No units of the asset exist at initialization. Minters can mint units of this asset using `createMintTx`, `signMintTx` and `issueTx`. The asset can be sent with `avm.send`. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmcreatevariablecapasset)"
					},
					"response": []
				},
				{
					"name": "export - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.export\",\n    \"params\" :{\n        \"from\": [\"{{xchainAddress}}\"],\n        \"to\":\"{{cchainbech32address}}\",\n        \"amount\": 4000001000000         ,\n        \"assetID\": \"AVAX\",\n        \"changeAddr\": \"{{xchainAddress}}\",\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\" \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Export a non-AVAX asset from the X-Chain to the C-Chain. After calling this method, you must call the C-Chain’s `import` method to complete the transfer. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmexport)"
					},
					"response": []
				},
				{
					"name": "exportKey - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.exportKey\",\n    \"params\" :{\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\",\n        \"address\": \"{{xchainAddress}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Get the private key that controls a given address.  \nThe returned private key can be added to a user with `avm.importKey`. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmexportkey)"
					},
					"response": []
				},
				{
					"name": "getAddressTxs - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     : 1,\n    \"method\" :\"avm.getAddressTxs\",\n    \"params\" :{\n        \"address\":\"{{xchainAddress}}\",\n        \"assetID\": \"AVAX\",\n        \"pageSize\": 20,\n        \"cursor\": 0\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Returns all transactions that change the balance of the given address. A transaction is said to change an address's balance if either is true:\n\n- A UTXO that the transaction consumes was at least partially owned by the address.\n- A UTXO that the transaction produces is at least partially owned by the address.\n    \n\nNote: Indexing (`index-transactions`) must be enabled in the X-chain config. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmgetaddresstxs)"
					},
					"response": []
				},
				{
					"name": "getAllBalances - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     : 1,\n    \"method\" :\"avm.getAllBalances\",\n    \"params\" :{\n        \"address\":\"{{xchainAddress}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Get the balances of all assets controlled by a given address. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmgetallbalances)"
					},
					"response": []
				},
				{
					"name": "getAssetDescription",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.getAssetDescription\",\n    \"params\" :{\n        \"assetID\" :\"{{avaxAssetId}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Get information about an asset. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmgetassetdescription)"
					},
					"response": []
				},
				{
					"name": "getBalance - DEPRECATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n  \"jsonrpc\":\"2.0\",\n  \"id\"     : 1,\n  \"method\" :\"avm.getBalance\",\n  \"params\" :{\n      \"address\":\"{{xchainAddress}}\",\n      \"assetID\": \"{{avaxAssetId}}\"\n  }\n} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Get the balance of an asset controlled by a given address. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmgetbalance)"
					},
					"response": []
				},
				{
					"name": "getBlock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.getBlock\",\n    \"params\" :{\n        \"blockID\": \"{{xchainBlockID}}\",\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Returns the block with the given id. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmgetblock)"
					},
					"response": []
				},
				{
					"name": "getBlockByHeight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.getBlockByHeight\",\n    \"params\" :{\n        \"height\": {{xhcainBlockHeight}},\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Returns block at the given height. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmgetblockbyheight)"
					},
					"response": []
				},
				{
					"name": "getHeight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.getHeight\",\n    \"params\" :{}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Returns the height of the last accepted block. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmgetheight)"
					},
					"response": []
				},
				{
					"name": "getTx",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.getTx\",\n    \"params\" :{\n        \"txID\":\"{{txID}}\",\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Returns the specified transaction [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmgettx)"
					},
					"response": []
				},
				{
					"name": "getTxStatus - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.10.0.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"avm.getTxStatus\",\n    \"params\": {\n        \"txID\": \"{{txID}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Get the status of a transaction sent to the network. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmgettxstatus)"
					},
					"response": []
				},
				{
					"name": "getUTXOs",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.getUTXOs\",\n    \"params\" :{\n        \"addresses\":[\"{{xchainAddress}}\"],\n        \"limit\": 5,\n        \"sourceChain\": \"X\",\n        \"encoding\": \"hex\",\n        \"startIndex\": { \n            \"address\": \"{{xchainAddress}}\",\n            \"utxo\": \"{{utxo}}\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Get the UTXOs that reference a given address. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmgetutxos)"
					},
					"response": []
				},
				{
					"name": "import - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.import\",\n    \"params\" :{\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\",\n        \"sourceChain\": \"P\",\n        \"to\":\"{{xchainAddress}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Finalize a transfer of AVAX from either the P-Chain to the X-Chain or the C-Chain to the X-Chain.\n\nBefore this method is called, you must call either the P-Chain’s `exportAVAX` method or the C-Chain’s `exportAVAX` method to initiate the transfer. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmimport)"
					},
					"response": []
				},
				{
					"name": "importKey - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.importKey\",\n    \"params\" :{\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\",\n        \"privateKey\":\"{{privkey}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Give a user control over an address by providing the private key that controls the address. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmimportkey)"
					},
					"response": []
				},
				{
					"name": "issueTx",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     : 1,\n    \"method\" :\"avm.issueTx\",\n    \"params\" :{\n        \"tx\":\"6sTENqXfk3gahxkJbEPsmX9eJTEFZRSRw83cRJqoHWBiaeAhVbz9QV4i6SLd6Dek4eLsojeR8FbT3arFtsGz9ycpHFaWHLX69edJPEmj2tPApsEqsFd7wDVp7fFxkG6HmySR\",\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Send a signed transaction to the network. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmissuetx)"
					},
					"response": []
				},
				{
					"name": "listAddresses - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"avm.listAddresses\",\n    \"params\": {\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\" \n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "List addresses controlled by the given user. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmlistaddresses)"
					},
					"response": []
				},
				{
					"name": "mint - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     : 1,\n    \"method\" :\"avm.mint\",\n    \"params\" :{\n        \"amount\": 10000000,\n        \"assetID\": \"2qnR9pLQTDZ9boSbcrcjS4n1DJJkzbkNsJzgwYvmRy8uv47fZT\",\n        \"from\": [\"{{xchainAddress}}\"],\n        \"to\": \"{{xchainAddress}}\",\n        \"minters\": [\n            \"{{xchainAddress}}\"\n        ],\n        \"changeAddr\": \"{{xchainAddress}}\",\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\" \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Create an unsigned transaction to mint more of a variable-cap asset (an asset created with `avm.createVariableCapAsset`.) [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmmint)"
					},
					"response": []
				},
				{
					"name": "mintNFT - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     : 1,\n    \"method\" :\"avm.mintNFT\",\n    \"params\" :{\n        \"assetID\":\"2KGdt2HpFKpTH5CtGZjYt5XPWs6Pv9DLoRBhiFfntbezdRvZWP\",\n        \"payload\":\"2EWh72jYQvEJF9NLk\",\n        \"from\": [\"{{xchainAddress}}\"],\n        \"to\":\"{{xchainAddress}}\",\n        \"minters\":[\n            \"{{xchainAddress}}\"\n        ],\n        \"changeAddr\": \"{{xchainAddress}}\",\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\" ,\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Mint more of a non-fungible asset (an asset created with `avm.createNFTAsset`.) [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmmintnft)"
					},
					"response": []
				},
				{
					"name": "send - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.send\",\n    \"params\" :{ \n        \"assetID\" : \"{{avaxAssetId}}\",\n        \"amount\"  : 2000000000,\n        \"from\"    : [\"{{xchainAddress}}\"],\n        \"to\"      : \"{{xchainAddress}}\",\n        \"changeAddr\": \"{{xchainAddress}}\",\n        \"memo\"    : \"\",\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\" \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Send a quantity of an asset to an address. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmsend)"
					},
					"response": []
				},
				{
					"name": "sendMultiple - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.sendMultiple\",\n    \"params\" :{ \n        \"outputs\": [\n            {\n                \"assetID\" : \"{{avaxAssetId}}\",\n                \"to\"      : \"{{xchainAddress}}\",\n                \"amount\"  : 1000000000\n            }\n        ],\n        \"from\"    : [\"{{xchainAddress}}\"],\n        \"changeAddr\": \"{{xchainAddress}}\",\n        \"memo\"    : \"{{memo}}\",\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\" \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Send a quantity of an asset to an address. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmsendmultiple)"
					},
					"response": []
				},
				{
					"name": "sendNFT - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avm.sendNFT\",\n    \"params\" :{ \n        \"assetID\" :\"2KGdt2HpFKpTH5CtGZjYt5XPWs6Pv9DLoRBhiFfntbezdRvZWP\",\n        \"from\"    : [\"{{xchainAddress}}\"],\n        \"to\"      :\"{{xchainAddress}}\",\n        \"groupID\" : 0,\n        \"changeAddr\": \"{{xchainAddress}}\",\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\" \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X"
							]
						},
						"description": "Send a quantity of an asset to an address. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#avmsendnft)"
					},
					"response": []
				},
				{
					"name": "wallet_issueTx",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Endpoint deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     : 1,\n    \"method\" :\"wallet.issueTx\",\n    \"params\" :{\n        \"tx\":\"0x00000009de31b4d8b22991d51aa6aa1fc733f23a851a8c9400000000000186a0000000005f041280000000005f9ca900000030390000000000000001fceda8f90fcb5d30614b99d79fc4baa29307762668f16eb0259a57c2d3b78c875c86ec2045792d4df2d926c40f829196e0bb97ee697af71f5b0a966dabff749634c8b729855e937715b0e44303fd1014daedc752006011b730\",\n        \"encoding\": \"hex\"\n        }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X/wallet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X",
								"wallet"
							]
						},
						"description": "Send a signed transaction to the network and assume the TX will be accepted. `encoding` specifies the format of the signed transaction. Can only be `hex` when a value is provided. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#walletissuetx)"
					},
					"response": []
				},
				{
					"name": "wallet_send",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"wallet.send\",\n    \"params\" :{\n        \"assetID\"   : \"AVAX\",\n        \"amount\"    : 10000,\n        \"to\"        : \"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5\",\n        \"memo\"      : \"hi, mom!\",\n        \"from\"      : [\"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5\"],\n        \"changeAddr\": \"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8\",\n        \"username\"  : \"userThatControlsAtLeast10000OfThisAsset\",\n        \"password\"  : \"myPassword\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X/wallet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X",
								"wallet"
							]
						},
						"description": "Send a quantity of an asset to an address and assume the TX will be accepted so that future calls can use the modified UTXO set. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#walletsend)"
					},
					"response": []
				},
				{
					"name": "wallet_sendMultiple",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"wallet.sendMultiple\",\n    \"params\" :{\n        \"outputs\": [\n            {\n                \"assetID\" : \"AVAX\",\n                \"to\"      : \"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5\",\n                \"amount\"  : 1000000000\n            },\n            {\n                \"assetID\" : \"26aqSTpZuWDAVtRmo44fjCx4zW6PDEx3zy9Qtp2ts1MuMFn9FB\",\n                \"to\"      : \"X-avax18knvhxx8uhc0mwlgrfyzjcm2wrd6e60w37xrjq\",\n                \"amount\"  : 10\n            }\n        ],\n        \"memo\"      : \"hi, mom!\",\n        \"from\"      : [\"X-avax18jma8ppw3nhx5r4ap8clazz0dps7rv5ukulre5\"],\n        \"changeAddr\": \"X-avax1turszjwn05lflpewurw96rfrd3h6x8flgs5uf8\",\n        \"username\"  : \"username\",\n        \"password\"  : \"myPassword\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/X/wallet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"X",
								"wallet"
							]
						},
						"description": "Send multiple transfers of `amount` of `assetID`, to a specified address from a list of owned of addresses and assume the TX will be accepted so that future calls can use the modified UTXO set. [More info](https://docs.avax.network/apis/avalanchego/apis/x-chain#walletsendmultiple)"
					},
					"response": []
				}
			],
			"description": "The X-Chain, Avalanche’s native platform for creating and trading assets, is an instance of the Avalanche Virtual Machine (AVM). This API allows clients to create and trade assets on the X-Chain and other instances of the AVM. [More info](https://docs.avax.network/v1.0/en/api/avm)"
		},
		{
			"name": "EVM",
			"item": [
				{
					"name": "eth_baseFee",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_baseFee\",\n    \"params\": [],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Get the base fee for the next block. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#eth_basefee)"
					},
					"response": []
				},
				{
					"name": "eth_blockNumber",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_blockNumber\",\n    \"params\": [],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Getting the most recent block number."
					},
					"response": []
				},
				{
					"name": "eth_call",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_call\",\n    \"params\": [\n        {\n            \"to\": \"0x197E90f9FAD81970bA7976f33CbD77088E5D7cf7\",\n            \"data\": \"0xc92aecc4\"\n        },\n        \"latest\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Call a contract."
					},
					"response": []
				},
				{
					"name": "eth_chainId",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_chainId\",\n    \"params\": [],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Not well documented in JSON-RPC references. See instead EIP694."
					},
					"response": []
				},
				{
					"name": "eth_getAssetBalance",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getAssetBalance\",\n    \"params\": [\n        \"{{cchainAddress}}\",\n        \"latest\",\n        \"2W4XDTMrQJm7YALcnCL4krU7JpoGQQaDkTdn2HbzpsqombHRaB\"\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Getting an account’s non-AVAX balance. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#eth_getassetbalance)"
					},
					"response": []
				},
				{
					"name": "eth_getBalance",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBalance\",\n    \"params\": [\n        \"{{cchainAddress}}\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Getting an account’s balance."
					},
					"response": []
				},
				{
					"name": "eth_getChainConfig",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"eth_getChainConfig\",\n    \"params\" :[]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "`eth_getChainConfig` returns chain config. This API is enabled by default with `internal-eth` namespace. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#eth_getchainconfig)"
					},
					"response": []
				},
				{
					"name": "eth_maxPriorityFeePerGas",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_maxPriorityFeePerGas\",\n    \"params\": [],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Get the priority fee needed to be included in a block. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#eth_maxpriorityfeepergas)"
					},
					"response": []
				},
				{
					"name": "eth_signTransaction",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_signTransaction\",\n    \"params\": [{\n        \"from\": \"0xa64b27635c967dfe9674926bc004626163ddce97\",\n        \"to\": \"0x1c5b0e12e90e9c52235babad76cfccab2519bb95\",\n        \"gas\": \"0x5208\",\n        \"gasPrice\": \"0x0\",\n        \"nonce\": \"0x0\",\n        \"value\": \"0x0\"\n    }],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Signing a transaction.\n\nThis method will create a signed transaction, but will not publish it automatically to the network. Instead, the `raw` result output should be used with `eth_sendRawTransaction` to execute the transaction."
					},
					"response": []
				},
				{
					"name": "eth_getTransactionCount",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionCount\",\n    \"params\": [\n        \"{{cchainAddress}}\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Getting an account’s nonce."
					},
					"response": []
				},
				{
					"name": "eth_sendRawTransaction",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_sendRawTransaction\",\n    \"params\": [\n        \"0xf8628080825208941c5b0e12e90e9c52235babad76cfccab2519bb958080830150efa0308ca8002f3df1a468eea9973d2d618eb866e2ef0a57cba4d34efb3025b70a0aa0592b7b0a803e7b70ec26dd74ab85aa71126198eff5552e5be638e6e26a455ee0\"\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Send a raw transaction.\n\nExample below shows a raw transaction published to the network and its associated transaction hash."
					},
					"response": []
				},
				{
					"name": "eth_getBlockByHash",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var table = `",
									"    <style type=\"text/css\">",
									"        table {border: 1px solid #000080; table-layout:fixed;}",
									"        td {border: 1px solid gray; word-wrap: break-word;max-width: 1000px;}",
									"        th {font-size:18px;background-color:#B0B0B0;}",
									"",
									"        .break {background-color:black;}",
									"    ",
									"        .switch {",
									"            position: relative;",
									"            display: inline-block;",
									"            width: 60px;",
									"            height: 34px;",
									"        }",
									"",
									"        .switch input {display:none;}",
									"",
									"        .slider {",
									"            position: absolute;",
									"             cursor: pointer;",
									"             top: 0;",
									"            left: 0;",
									"            right: 0;",
									"            bottom: 0;",
									"            background-color: #ccc;",
									"            -webkit-transition: .4s;",
									"            transition: .4s;",
									"        }",
									"",
									"        .slider:before {",
									"            position: absolute;",
									"            content: \"\";",
									"            height: 26px;",
									"            width: 26px;",
									"            left: 4px;",
									"            bottom: 4px;",
									"            background-color: white;",
									"            -webkit-transition: .4s;",
									"            transition: .4s;",
									"        }",
									"",
									"        input:checked + .slider {",
									"            background-color: red;",
									"        }",
									"",
									"        input:focus + .slider {",
									"             box-shadow: 0 0 1px #2196F3;",
									"        }",
									"",
									"        input:checked + .slider:before {",
									"            -webkit-transform: translateX(26px);",
									"            -ms-transform: translateX(26px);",
									"            transform: translateX(26px);",
									"        }",
									"",
									"        </style>",
									"",
									"        <b> User Friendly View: </b>",
									"        <br>",
									"        <label class=\"switch\">",
									"                <input type=\"checkbox\" onclick=\"toggle(this);\" checked=\"true\">",
									"                <div class=\"slider\"></div>",
									"        </label>",
									"        <br>",
									"        <br>",
									"",
									"    <script>",
									"",
									"        function userFriendlyViewOn (){",
									"            switchToColor();",
									"            toDec();",
									"            convertTimeUTC();",
									"        }",
									"",
									"        function userFriendlyViewOFF (){",
									"            switchToGray();",
									"            toHex();",
									"            decimalTime();",
									"        }",
									"",
									"        function toggle(checkbox) {",
									"            if (checkbox.checked) {",
									"                userFriendlyViewOn();",
									"            } else {",
									"                userFriendlyViewOFF();",
									"            }",
									"        }",
									"",
									"        function add(x, y, base) {",
									"            var z = [];",
									"            var n = Math.max(x.length, y.length);",
									"            var carry = 0;",
									"            var i = 0;",
									"            while (i < n || carry) {",
									"                var xi = i < x.length ? x[i] : 0;",
									"                var yi = i < y.length ? y[i] : 0;",
									"                var zi = carry + xi + yi;",
									"                z.push(zi % base);",
									"                carry = Math.floor(zi / base);",
									"                i++;",
									"            }",
									"            return z;",
									"        }",
									"",
									"",
									"        function multiplyByNumber(num, x, base) {",
									"            if (num < 0) return null;",
									"            if (num == 0) return [];",
									"",
									"            var result = [];",
									"            var power = x;",
									"            while (true) {",
									"                if (num & 1) {",
									"                result = add(result, power, base);",
									"                }",
									"                num = num >> 1;",
									"                if (num === 0) break;",
									"                power = add(power, power, base);",
									"            }",
									"",
									"            return result;",
									"        }",
									"",
									"        function parseToDigitsArray(str, base) {",
									"            var digits = str.split('');",
									"            var ary = [];",
									"            for (var i = digits.length - 1; i >= 0; i--) {",
									"                var n = parseInt(digits[i], base);",
									"                if (isNaN(n)) return null;",
									"                ary.push(n);",
									"            }",
									"            return ary;",
									"        }",
									"",
									"        function convertBase(str, fromBase, toBase) {",
									"            var digits = parseToDigitsArray(str, fromBase);",
									"            if (digits === null) return null;",
									"            if (digits == 0) return 0;",
									"",
									"            var outArray = [];",
									"            var power = [1];",
									"            for (var i = 0; i < digits.length; i++) {",
									"                // invariant: at this point, fromBase^i = power",
									"                if (digits[i]) {",
									"                outArray = add(outArray, multiplyByNumber(digits[i], power, toBase), toBase);",
									"                }",
									"                power = multiplyByNumber(fromBase, power, toBase);",
									"            }",
									"",
									"            var out = '';",
									"            for (var i = outArray.length - 1; i >= 0; i--) {",
									"                out += outArray[i].toString(toBase);",
									"            }",
									"            return out;",
									"        }",
									"",
									"        function toDec() {",
									"            {{#if response.result.transactions}}",
									"                var value0=document.getElementsByClassName(\"value\");",
									"                for ( let i=0; i < value0.length; i++ ){",
									"                    ",
									"                    var fullHex0 = value0[i].innerText;",
									"                    var splitHex0 = fullHex0.split(\"0x\");",
									"                    var hexWithoutOx0 = splitHex0[1];",
									"                    var hexAsString0 = hexWithoutOx0.toString();",
									"                    var decimalNumber0 = convertBase(hexAsString0, 16, 10);",
									"                    ",
									"                    value0[i].innerHTML = decimalNumber0 + \" Wei \" + \" = <b>\"  + decimalNumber0 / (10 ** 18) + \"  Avax\" +  \"</b>\" ;",
									"                }",
									"    ",
									"                var value1=document.getElementsByClassName(\"blockNumber\");",
									"                for ( let i=0; i < value1.length; i++ ){",
									"                    ",
									"                    var fullHex1 = value1[i].innerText;",
									"                    var splitHex1 = fullHex1.split(\"0x\");",
									"                    var hexWithoutOx1 = splitHex1[1];",
									"                    var hexAsString1 = hexWithoutOx1.toString();",
									"                    var decimalNumber1 = convertBase(hexAsString1, 16, 10);",
									"                ",
									"                    value1[i].innerHTML = decimalNumber1;",
									"                }",
									"",
									"                var value2=document.getElementsByClassName(\"gas\");",
									"                for ( let i=0; i < value2.length; i++ ){",
									"        ",
									"                    var fullHex2 = value2[i].innerText;",
									"                    var splitHex2 = fullHex2.split(\"0x\");",
									"                    var hexWithoutOx2 = splitHex2[1];",
									"                    var hexAsString2 = hexWithoutOx2.toString();",
									"                    var decimalNumber2 = convertBase(hexAsString2, 16, 10);",
									"                    var numberWithCommas2 = Number(decimalNumber2).toLocaleString();",
									"                    ",
									"                    value2[i].innerHTML = numberWithCommas2;",
									"                }",
									"        ",
									"        ",
									"                var value3=document.getElementsByClassName(\"gasPrice\");",
									"                for ( let i=0; i < value3.length; i++ ){",
									"                    ",
									"                    var fullHex3 = value3[i].innerText;",
									"                    var splitHex3 = fullHex3.split(\"0x\");",
									"                    var hexWithoutOx3 = splitHex3[1];",
									"                    var hexAsString3 = hexWithoutOx3.toString();",
									"                    var decimalNumber3 = convertBase(hexAsString3, 16, 10);",
									"                    var nAvax3 = decimalNumber3 / (10 ** 9);",
									"                    ",
									"                    value3[i].innerHTML = decimalNumber3 + \" Wei \" + \" = <b>\"  +  nAvax3 +  \" nAvax </b>\" ;",
									"                }",
									"        ",
									"                ",
									"                var value4 = document.getElementsByClassName(\"maxFeePerGas\");",
									"                for ( let i=0; i < value4.length; i++ ){",
									"                        ",
									"                    var fullHex4 = value4[i].innerText;",
									"                    var splitHex4 = fullHex4.split(\"0x\");",
									"                    var hexWithoutOx4 = splitHex4[1];",
									"                    var hexAsString4 = hexWithoutOx4.toString();",
									"                    var decimalNumber4 = convertBase(hexAsString4, 16, 10);",
									"                    var nAvax4 = decimalNumber4 / (10 ** 9);",
									"                        ",
									"                    value4[i].innerHTML = decimalNumber4 + \" Wei \" + \" = <b>\"  +  nAvax4 +  \" nAvax </b>\" ;",
									"                }",
									"            ",
									"                var value5 = document.getElementsByClassName(\"maxPriorityFeePerGas\");",
									"                for ( let i=0; i < value5.length; i++ ){",
									"                        ",
									"                    var fullHex5 = value5[i].innerText;",
									"                    var splitHex5 = fullHex5.split(\"0x\");",
									"                    var hexWithoutOx5 = splitHex5[1];",
									"                    var hexAsString5 = hexWithoutOx5.toString();",
									"                    var decimalNumber5 = convertBase(hexAsString5, 16, 10);",
									"                    var nAvax5 = decimalNumber5 / (10 ** 9);",
									"                        ",
									"                    value5[i].innerHTML = decimalNumber5 + \" Wei \" + \" = <b>\"  +  nAvax5 +  \" nAvax </b>\" ;",
									"                }",
									"            ",
									"                var value6=document.getElementsByClassName(\"nonce\");",
									"                for ( let i=0; i < value6.length; i++ ){",
									"                    ",
									"                    var fullHex6 = value6[i].innerText;",
									"                    var splitHex6 = fullHex6.split(\"0x\");",
									"                    var hexWithoutOx6 = splitHex6[1];",
									"                    var hexAsString6 = hexWithoutOx6.toString();",
									"                    var decimalNumber6 = convertBase(hexAsString6, 16, 10);",
									"                    ",
									"                    value6[i].innerHTML = decimalNumber6;",
									"                }",
									"        ",
									"                var value7=document.getElementsByClassName(\"transactionIndex\");",
									"                for ( let i=0; i < value7.length; i++ ){",
									"                    ",
									"                    var fullHex7 = value7[i].innerText;",
									"                    var splitHex7 = fullHex7.split(\"0x\");",
									"                    var hexWithoutOx7 = splitHex7[1];",
									"                    var hexAsString7 = hexWithoutOx7.toString();",
									"                    var decimalNumber7 = convertBase(hexAsString7, 16, 10);",
									"                    ",
									"                    value7[i].innerHTML = decimalNumber7;",
									"                }",
									"        ",
									"                var value8=document.getElementsByClassName(\"type\");",
									"                for ( let i=0; i < value8.length; i++ ){",
									"                    ",
									"                    var fullHex8 = value8[i].innerText;",
									"                    var splitHex8 = fullHex8.split(\"0x\");",
									"                    var hexWithoutOx8 = splitHex8[1];",
									"                    var hexAsString8 = hexWithoutOx8.toString();",
									"                    var decimalNumber8 = convertBase(hexAsString8, 16, 10);",
									"                    ",
									"                    if( decimalNumber8 == 0 ) {",
									"                        value8[i].innerHTML = decimalNumber8 + \" (legacy)\";",
									"                    } else if( decimalNumber8 == 2) {",
									"                        value8[i].innerHTML = decimalNumber8 + \" (EIP-1559)\";",
									"                    }",
									"                }",
									"            ",
									"                var value9=document.getElementsByClassName(\"chainId\");",
									"                for ( let i=0; i < value9.length; i++ ){",
									"                    ",
									"                    var fullHex9 = value9[i].innerText;",
									"                    var splitHex9 = fullHex9.split(\"0x\");",
									"                    var hexWithoutOx9 = splitHex9[1];",
									"                    var hexAsString9 = hexWithoutOx9.toString();",
									"                    var decimalNumber9 = convertBase(hexAsString9, 16, 10);",
									"                    ",
									"                    value9[i].innerHTML = decimalNumber9;",
									"                }",
									"            {{/if}}",
									"            ",
									"            {{#if response.result.baseFeePerGas}}",
									"                var value10=document.getElementById(\"baseFeePerGas\");",
									"",
									"                var fullHex10 = value10.innerText;",
									"                var splitHex10 = fullHex10.split(\"0x\");",
									"                var hexWithoutOx10 = splitHex10[1];",
									"                var hexAsString10 = hexWithoutOx10.toString();",
									"                var decimalNumber10 = convertBase(hexAsString10, 16, 10);",
									"                var nAvax10 = decimalNumber10 / (10 ** 9);",
									"                    ",
									"                value10.innerHTML = decimalNumber10 + \" Wei \" + \" = <b>\"  +  nAvax10 +  \" nAvax </b>\" ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.blockGasCost}}",
									"                var value11=document.getElementById(\"blockGasCost\");",
									"                    ",
									"                var fullHex11 = value11.innerText;",
									"                var splitHex11 = fullHex11.split(\"0x\");",
									"                var hexWithoutOx11 = splitHex11[1];",
									"                var hexAsString11 = hexWithoutOx11.toString();",
									"                var decimalNumber11 = convertBase(hexAsString11, 16, 10);",
									"                var nAvax11 = decimalNumber11 / (10 ** 9);",
									"                    ",
									"                value11.innerHTML = decimalNumber11 + \" Wei \" + \" = <b>\"  +  nAvax11 +  \" nAvax </b>\" ;",
									"            {{/if}}",
									"        ",
									"            {{#if response.result.difficulty}}",
									"                var value12=document.getElementById(\"difficulty\");",
									"                ",
									"                var fullHex12 = value12.innerText;",
									"                var splitHex12 = fullHex12.split(\"0x\");",
									"                var hexWithoutOx12 = splitHex12[1];",
									"                var hexAsString12 = hexWithoutOx12.toString();",
									"                var decimalNumber12 = convertBase(hexAsString12, 16, 10);",
									"                    ",
									"                value12.innerHTML = decimalNumber12;",
									"            {{/if}}",
									"",
									"            {{#if response.result.totalDifficulty}}",
									"                var value13 = document.getElementById(\"totalDifficulty\");",
									"                ",
									"                var fullHex13 = value13.innerText;",
									"                var splitHex13 = fullHex13.split(\"0x\");",
									"                var hexWithoutOx13 = splitHex13[1];",
									"                var hexAsString13 = hexWithoutOx13.toString();",
									"                var decimalNumber13 = convertBase(hexAsString13, 16, 10);",
									"                var numberWithCommas13 = Number(decimalNumber13).toLocaleString();",
									"                    ",
									"                value13.innerHTML = numberWithCommas13;",
									"            {{/if}}",
									"",
									"            {{#if response.result.gasLimit}}",
									"                var value14 = document.getElementById(\"gasLimit\");",
									"                ",
									"                var fullHex14 = value14.innerText;",
									"                var splitHex14 = fullHex14.split(\"0x\");",
									"                var hexWithoutOx14 = splitHex14[1];",
									"                var hexAsString14 = hexWithoutOx14.toString();",
									"                var decimalNumber14 = convertBase(hexAsString14, 16, 10);",
									"                var numberWithCommas14 = Number(decimalNumber14).toLocaleString();",
									"                    ",
									"                value14.innerHTML = numberWithCommas14;",
									"            {{/if}}",
									"",
									"            {{#if response.result.gasUsed}}",
									"                var value15 = document.getElementById(\"gasUsed\");",
									"                ",
									"                var fullHex15 = value15.innerText;",
									"                var splitHex15 = fullHex15.split(\"0x\");",
									"                var hexWithoutOx15 = splitHex15[1];",
									"                var hexAsString15 = hexWithoutOx15.toString();",
									"                var decimalNumber15 = convertBase(hexAsString15, 16, 10);",
									"                var numberWithCommas15 = Number(decimalNumber15).toLocaleString();",
									"                var percent = (decimalNumber15 * 100)/ decimalNumber14;",
									"                var percentRounded = percent.toFixed(2);",
									"                    ",
									"                value15.innerHTML = numberWithCommas15 + \" (\" + percentRounded + \"%)\" ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.number}}",
									"                var value16=document.getElementById(\"number\");",
									"                ",
									"                var fullHex16 = value16.innerText;",
									"                var splitHex16 = fullHex16.split(\"0x\");",
									"                var hexWithoutOx16 = splitHex16[1];",
									"                var hexAsString16 = hexWithoutOx16.toString();",
									"                var decimalNumber16 = convertBase(hexAsString16, 16, 10);",
									"                    ",
									"                value16.innerHTML = decimalNumber16;",
									"            {{/if}}",
									"",
									"            {{#if response.result.size}}",
									"                var value17 = document.getElementById(\"size\");",
									"                ",
									"                var fullHex17 = value17.innerText;",
									"                var splitHex17 = fullHex17.split(\"0x\");",
									"                var hexWithoutOx17 = splitHex17[1];",
									"                var hexAsString17 = hexWithoutOx17.toString();",
									"                var decimalNumber17 = convertBase(hexAsString17, 16, 10);",
									"                var numberWithCommas17 = Number(decimalNumber17).toLocaleString();",
									"                    ",
									"                value17.innerHTML = numberWithCommas17 + \" bytes\";",
									"            {{/if}}",
									"",
									"            {{#if response.result.extDataGasUsed}}",
									"                var value18 = document.getElementById(\"extDataGasUsed\");",
									"                ",
									"                var fullHex18 = value18.innerText;",
									"                var splitHex18 = fullHex18.split(\"0x\");",
									"                var hexWithoutOx18 = splitHex18[1];",
									"                var hexAsString18 = hexWithoutOx18.toString();",
									"                var decimalNumber18 = convertBase(hexAsString18, 16, 10);",
									"                var numberWithCommas18 = Number(decimalNumber18).toLocaleString();",
									"                    ",
									"                value18.innerHTML = numberWithCommas18;",
									"            {{/if}}",
									"",
									"        }  ",
									"",
									"        function toHex() {",
									"            {{#if response.result.transactions}}",
									"                var value0=document.getElementsByClassName(\"value\");",
									"                for ( let i=0; i < value0.length; i++ ){",
									"                    ",
									"                    var decNumber0 = value0[i].innerText;",
									"                    var getNumber0 = decNumber0.split(' Wei');",
									"                    var obtainedNumber0 = getNumber0[0];",
									"                    var asString0 = obtainedNumber0.toString();",
									"                    var hexString0 = convertBase(asString0, 10, 16);",
									"",
									"                    value0[i].innerHTML = \"0x\" +  hexString0  ;",
									"                }",
									"    ",
									"                var value1=document.getElementsByClassName(\"blockNumber\");",
									"                for ( let i=0; i < value1.length; i++ ){",
									"                    ",
									"                    var decNumber1 = value1[i].innerText;",
									"                    var asString1 = decNumber1.toString();",
									"                    var hexString1 = convertBase(asString1, 10, 16);",
									"",
									"                    value1[i].innerHTML = \"0x\" + hexString1 ;",
									"                }",
									"",
									"                var value2=document.getElementsByClassName(\"gas\");",
									"                for ( let i=0; i < value2.length; i++ ){",
									"                    ",
									"                    var decNumber2 = value2[i].innerText;",
									"                    var removeCommas2 = parseFloat(decNumber2.toString().replace(/,/g, \"\"));",
									"                    var asString2 = removeCommas2.toString();",
									"                    var hexString2 = convertBase(asString2, 10, 16);",
									"                    ",
									"                    value2[i].innerHTML = \"0x\" + hexString2 ;",
									"                }",
									"        ",
									"                var value3=document.getElementsByClassName(\"gasPrice\");",
									"                for ( let i=0; i < value3.length; i++ ){",
									"                    ",
									"                    var decNumber3 = value3[i].innerText;",
									"                    var getNumber3 = decNumber3.split(' Wei');",
									"                    var obtainedNumber3 = getNumber3[0];",
									"                    var asString3 = obtainedNumber3.toString();",
									"                    var hexString3 = convertBase(asString3, 10, 16);",
									"",
									"                    value3[i].innerHTML = \"0x\" +  hexString3  ;",
									"                }",
									"        ",
									"                var value4 = document.getElementsByClassName(\"maxFeePerGas\");",
									"                for ( let i=0; i < value4.length; i++ ){",
									"                        ",
									"                    var decNumber4 = value4[i].innerText;",
									"                    var getNumber4 = decNumber4.split(' Wei');",
									"                    var obtainedNumber4 = getNumber4[0];",
									"                    var asString4 = obtainedNumber4.toString();",
									"                    var hexString4 = convertBase(asString4, 10, 16);",
									"",
									"                    value4[i].innerHTML = \"0x\" +  hexString4  ;",
									"                }",
									"            ",
									"                var value5 = document.getElementsByClassName(\"maxPriorityFeePerGas\");",
									"                for ( let i=0; i < value5.length; i++ ){",
									"                        ",
									"                    var decNumber5 = value5[i].innerText;",
									"                    var getNumber5 = decNumber5.split(' Wei');",
									"                    var obtainedNumber5 = getNumber5[0];",
									"                    var asString5 = obtainedNumber5.toString();",
									"                    var hexString5 = convertBase(asString5, 10, 16);",
									"",
									"                    value5[i].innerHTML = \"0x\" +  hexString5  ;",
									"                }",
									"            ",
									"                var value6=document.getElementsByClassName(\"nonce\");",
									"                for ( let i=0; i < value6.length; i++ ){",
									"                    ",
									"                    var decNumber6 = value6[i].innerText;",
									"                    var asString6 = decNumber6.toString();",
									"                    var hexString6 = convertBase(asString6, 10, 16);",
									"",
									"                    value6[i].innerHTML = \"0x\" + hexString6 ;",
									"                }",
									"        ",
									"                var value7=document.getElementsByClassName(\"transactionIndex\");",
									"                for ( let i=0; i < value7.length; i++ ){",
									"                    ",
									"                    var decNumber7 = value7[i].innerText;",
									"                    var asString7 = decNumber7.toString();",
									"                    var hexString7 = convertBase(asString7, 10, 16);",
									"",
									"                    value7[i].innerHTML = \"0x\" + hexString7 ;",
									"                }",
									"        ",
									"                var value8=document.getElementsByClassName(\"type\");",
									"                for ( let i=0; i < value8.length; i++ ){",
									"                    ",
									"                    var decNumber8 = value8[i].innerText;",
									"                    var getNumber8 = decNumber8.split(' (');",
									"                    var obtainedNumber8 = getNumber8[0];",
									"                    var asString8 = obtainedNumber8.toString();",
									"                    var hexString8 = convertBase(asString8, 10, 16);",
									"",
									"                    value8[i].innerHTML = \"0x\" +  hexString8  ;      ",
									"                }",
									"            ",
									"                var value9=document.getElementsByClassName(\"chainId\");",
									"                for ( let i=0; i < value9.length; i++ ){",
									"                    ",
									"                    var decNumber9 = value9[i].innerText;",
									"                    var asString9 = decNumber9.toString();",
									"                    var hexString9 = convertBase(asString9, 10, 16);",
									"",
									"                    value9[i].innerHTML = \"0x\" + hexString9 ;",
									"                }",
									"            {{/if}}",
									"",
									"            {{#if response.result.baseFeePerGas}}",
									"                var value10 = document.getElementById(\"baseFeePerGas\");",
									"",
									"                var decNumber10 = value10.innerText;",
									"                var getNumber10 = decNumber10.split(' Wei');",
									"                var obtainedNumber10 = getNumber10[0];",
									"                var asString10 = obtainedNumber10.toString();",
									"                var hexString10 = convertBase(asString10, 10, 16);",
									"",
									"                value10.innerHTML = \"0x\" +  hexString10  ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.blockGasCost}}",
									"                var value11 = document.getElementById(\"blockGasCost\");",
									"",
									"                var decNumber11 = value11.innerText;",
									"                var getNumber11 = decNumber11.split(' Wei');",
									"                var obtainedNumber11 = getNumber11[0];",
									"                var asString11 = obtainedNumber11.toString();",
									"                var hexString11 = convertBase(asString11, 10, 16);",
									"",
									"                value11.innerHTML = \"0x\" +  hexString11  ;",
									"            {{/if}}",
									"            ",
									"            {{#if response.result.difficulty}}",
									"                var value12=document.getElementById(\"difficulty\");",
									"                    ",
									"                var decNumber12 = value12.innerText;",
									"                var asString12 = decNumber12.toString();",
									"                var hexString12 = convertBase(asString12, 10, 16);",
									"",
									"                value12.innerHTML = \"0x\" + hexString12 ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.totalDifficulty}}",
									"                var value13=document.getElementById(\"totalDifficulty\");",
									"",
									"                var decNumber13 = value13.innerText;",
									"                var removeCommas13 = parseFloat(decNumber13.toString().replace(/,/g, \"\"));",
									"                var asString13 = removeCommas13.toString();",
									"                var hexString13 = convertBase(asString13, 10, 16);",
									"                    ",
									"                value13.innerHTML = \"0x\" + hexString13 ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.gasLimit}}",
									"                var value14 = document.getElementById(\"gasLimit\");",
									"                var decNumber14 = value14.innerText;",
									"                var removeCommas14 = parseFloat(decNumber14.toString().replace(/,/g, \"\"));",
									"                var asString14 = removeCommas14.toString();",
									"                var hexString14 = convertBase(asString14, 10, 16);",
									"                    ",
									"                value14.innerHTML = \"0x\" + hexString14 ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.gasUsed}}",
									"                var value15 = document.getElementById(\"gasUsed\");",
									"                var decNumber15 = value15.innerText;",
									"                var getNumber15 = decNumber15.split(' (');",
									"                var lng = getNumber15.length;",
									"                var removeCommas15 = parseFloat(getNumber15[lng-2].toString().replace(/,/g, \"\"));",
									"                var asString15 = removeCommas15.toString();",
									"                var hexString15 = convertBase(asString15, 10, 16);",
									"                ",
									"                value15.innerHTML = \"0x\" + hexString15 ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.number}}",
									"                var value16=document.getElementById(\"number\");",
									"                    ",
									"                var decNumber16 = value16.innerText;",
									"                var asString16 = decNumber16.toString();",
									"                var hexString16 = convertBase(asString16, 10, 16);",
									"",
									"                value16.innerHTML = \"0x\" + hexString16 ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.size}}",
									"                var value16 = document.getElementById(\"size\");",
									"                var decNumber16 = value16.innerText;",
									"                var getNumber16 = decNumber16.split(' bytes');",
									"                var removeCommas16 = parseFloat(getNumber16[0].toString().replace(/,/g, \"\"));",
									"                var asString16 = removeCommas16.toString();",
									"                var hexString16 = convertBase(asString16, 10, 16);",
									"                ",
									"                value16.innerHTML = \"0x\" + hexString16 ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.extDataGasUsed}}",
									"                var value17 = document.getElementById(\"extDataGasUsed\");",
									"                var decNumber17 = value17.innerText;",
									"                var removeCommas17 = parseFloat(decNumber17.toString().replace(/,/g, \"\"));",
									"                var asString17 = removeCommas17.toString();",
									"                var hexString17 = convertBase(asString17, 10, 16);",
									"                    ",
									"                value17.innerHTML = \"0x\" + hexString17 ;",
									"            {{/if}}",
									"                ",
									"        }  ",
									"        ",
									"        function convertTimeUTC() {",
									"            var timestamp={{response.result.timestamp}};",
									"",
									"            var d = new Date(timestamp * 1000), ",
									"                yyyy = d.getFullYear(),",
									"                mm = ('0' + (d.getMonth() + 1)).slice(-2),  ",
									"                dd = ('0' + d.getDate()).slice(-2),       ",
									"                hh = d.getHours(),",
									"                h = hh,",
									"                min = ('0' + d.getMinutes()).slice(-2),     ",
									"                sec = ('0' + d.getSeconds()).slice(-2),",
									"                ampm = 'AM',",
									"                x=d.toUTCString();",
									"                time;",
									"",
									"            if (hh > 12) {",
									"                h = hh - 12;",
									"                ampm = 'PM';",
									"            } else if (hh === 12) {",
									"                h = 12;",
									"                ampm = 'PM';",
									"            } else if (hh == 0) {",
									"                h = 12;",
									"            }",
									"",
									"            ",
									"            time = yyyy + \"-\" + mm + \"-\" + dd + \", \" + h + \":\" + min + \":\" + sec + \" \" + ampm;",
									"            ",
									"            var createDate = new Date();",
									"            var offset = createDate.getTimezoneOffset(); ",
									"            var createDate = (-offset)/60;",
									"",
									"            const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;",
									"",
									"",
									"            var showTime=document.getElementById(\"time\");",
									"            if ( createDate > 0 ) {",
									"                showTime.innerHTML = time + \" \" + \"UTC +\" + createDate + \" (\" + timezone + \")\";",
									"                }",
									"            else {",
									"                showTime.innerHTML = time + \" \" + \"UTC \" + createDate;",
									"            }",
									"",
									"        }",
									"",
									"        function decimalTime() {",
									"            var showTime=document.getElementById(\"time\");",
									"            showTime.innerHTML = {{response.result.timestamp}};",
									"        }",
									"",
									"        function switchToColor() { ",
									"            var block = document.getElementsByClassName(\"blockInfo\");",
									"            for (let i = 0; i < block.length; i++) {",
									"                block[i].style.backgroundColor = \"#F2D9D9\";",
									"                }",
									"",
									"            var block2 = document.getElementsByClassName(\"blockInfo2\")",
									"            for (let i = 0; i < block2.length; i++) {",
									"                block2[i].style.backgroundColor = \"#FFFDD0\";",
									"                }",
									"            ",
									"            var txHeader = document.getElementById(\"transactionsHeader\");",
									"            txHeader.style.backgroundColor = \"#FFDEAD\";",
									"",
									"            var tx = document.getElementsByClassName(\"txInfo\");",
									"            for (let i = 0; i < tx.length; i++) {",
									"                tx[i].style.backgroundColor = \"#F0F8FF\";",
									"                }",
									"    ",
									"            var gas = document.getElementsByClassName(\"gasInfo\");",
									"            for (let i = 0; i < gas.length; i++) {",
									"                gas[i].style.backgroundColor = \"#FFCCCB\";",
									"                }",
									"        ",
									"            var vrs = document.getElementsByClassName(\"vrs\");",
									"            for (let i = 0; i < vrs.length; i++) {",
									"                vrs[i].style.backgroundColor = \"#E6E6FA\";",
									"                }",
									"        ",
									"            var chain = document.getElementsByClassName(\"chainInfo\");",
									"            for (let i = 0; i < chain.length; i++) {",
									"                chain[i].style.backgroundColor = \"#ECFFDC\";",
									"                }",
									"",
									"        }",
									"",
									"        function switchToGray() { ",
									"            var block = document.getElementsByClassName(\"blockInfo\");",
									"            for (let i = 0; i < block.length; i++) {",
									"                block[i].style.backgroundColor = \"transparent\";",
									"                }",
									"",
									"            var block2 = document.getElementsByClassName(\"blockInfo2\")",
									"            for (let i = 0; i < block2.length; i++) {",
									"                block2[i].style.backgroundColor = \"transparent\";",
									"                }",
									"",
									"            var txHeader = document.getElementById(\"transactionsHeader\");",
									"            txHeader.style.backgroundColor = \"transparent\";",
									"",
									"            var tx = document.getElementsByClassName(\"txInfo\");",
									"            for (let i = 0; i < tx.length; i++) {",
									"                tx[i].style.backgroundColor = \"transparent\";",
									"                }",
									"    ",
									"            var gas = document.getElementsByClassName(\"gasInfo\");",
									"            for (let i = 0; i < gas.length; i++) {",
									"                gas[i].style.backgroundColor = \"transparent\";",
									"                }",
									"        ",
									"            var vrs = document.getElementsByClassName(\"vrs\");",
									"            for (let i = 0; i < vrs.length; i++) {",
									"                vrs[i].style.backgroundColor = \"transparent\";",
									"                }",
									"        ",
									"            const chain = document.getElementsByClassName(\"chainInfo\");",
									"            for (let i = 0; i < chain.length; i++) {",
									"                chain[i].style.backgroundColor = \"transparent\";",
									"                }",
									"",
									"        }",
									"",
									"    </script>",
									"",
									"    <body onLoad = \"userFriendlyViewOn()\">",
									"",
									"    <table>",
									"        <tr>",
									"            <th colspan=\"3\"> Block: </th>",
									"        </tr>",
									"            ",
									"        <tr>",
									"        <td class = \"blockInfo\"> Base fee per gas: </td>",
									"        <td class = \"blockInfo\" id=\"baseFeePerGas\" colspan=\"2\"> {{response.result.baseFeePerGas}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Block gas cost: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"blockGasCost\"> {{response.result.blockGasCost}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Difficulty: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"difficulty\"> {{response.result.difficulty}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Extra gas used: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"extDataGasUsed\"> {{response.result.extDataGasUsed}} </td>",
									"        </tr>",
									"",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Extra data hash: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.extDataHash}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Extra data: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.extraData}} </td>",
									"        </tr>",
									"",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Gas limit: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"gasLimit\"> {{response.result.gasLimit}} </td>",
									"        </tr>",
									"",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Gas used: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"gasUsed\"> {{response.result.gasUsed}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Hash: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.hash}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Logs bloom: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.logsBloom}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Miner: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.miner}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Mix hash: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.mixHash}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Nonce: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"nonce\"> {{response.result.nonce}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Number: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"number\"> {{response.result.number}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Parent hash: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.parentHash}} </td>",
									"        </tr>",
									"        ",
									"        <tr>",
									"        <td class = \"blockInfo\"> Receipts root: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.receiptsRoot}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Sha3 uncles: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.sha3Uncles}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Size: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"size\"> {{response.result.size}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> State root: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.stateRoot}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Timestamp: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"time\"> {{response.result.timestamp}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Total difficulty: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"totalDifficulty\"> {{response.result.totalDifficulty}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td colspan=\"3\" id=\"transactionsHeader\"> Block's transactions: </td>",
									"        </tr>",
									"        ",
									"        {{#each response.result.transactions}}",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"blockInfo2\"> Block hash: </td>",
									"            <td class = \"blockInfo2\" colspan=\"2\"> {{blockHash}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"blockInfo2\"> Block number: </td>",
									"            <td class = \"blockInfo2 blockNumber\"> {{blockNumber}}</td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td>",
									"            <td class = \"gasInfo\"> Gas: </td>",
									"            <td class = \"gasInfo gas\"> {{gas}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"gasInfo\"> Gas price: </td>",
									"            <td class = \"gasInfo gasPrice\"> {{gasPrice}} </td>",
									"        </tr>",
									"        ",
									"        {{#if maxFeePerGas}}",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"gasInfo\"> Max fee per gas: </td>",
									"            <td class = \"gasInfo maxFeePerGas\"> {{maxFeePerGas}} </td>",
									"        </tr>",
									"        {{/if}}",
									"  ",
									"",
									"        {{#if maxPriorityFeePerGas}}",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"gasInfo\"> Max priority fee per gas: </td>",
									"            <td class = \"gasInfo maxPriorityFeePerGas\"> {{maxPriorityFeePerGas}} </td>",
									"        </tr>",
									"        {{/if}}",
									"       ",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Transaction Hash: </td>",
									"            <td class = \"txInfo\"> {{hash}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Input: </td>",
									"            <td class = \"txInfo\"> {{input}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Nonce: </td>",
									"            <td class = \"txInfo nonce\"> {{nonce}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> From: </td>",
									"            <td class = \"txInfo\"> {{from}} </td>",
									"        </tr>",
									"      ",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> To: </td>",
									"            <td class = \"txInfo\"> {{to}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Transaction index: </td>",
									"            <td class = \"txInfo transactionIndex\"> {{transactionIndex}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Value: </td>",
									"            <td class = \"txInfo value\"> {{value}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Type: </td>",
									"            <td class = \"txInfo type\"> {{type}} </td>",
									"        </tr>",
									"",
									"        {{#if response.result.accessList}}",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Input: </td>",
									"            <td class = \"txInfo\"> {{accessList}} </td>",
									"        </tr>",
									"        {{/if}}",
									"     ",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"chainInfo\"> Chain ID: </td>",
									"            <td class = \"chainInfo chainId\"> {{chainId}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"vrs\"> v: </td>",
									"            <td class = \"vrs\"> {{v}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"vrs\"> r: </td>",
									"            <td class = \"vrs\"> {{r}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"vrs\"> s: </td>",
									"            <td class = \"vrs\"> {{s}} </td>",
									"        </tr>",
									"",
									"          <tr>",
									"            <td> </td>",
									"            <td class = \"break\"> </td>",
									"            <td class = \"break\"> </td>",
									"        </tr>",
									"",
									"        {{/each}}",
									"",
									"      <tr>",
									"        <td class = \"blockInfo\"> Transactions root: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.transactionsRoot}} </td>",
									"      </tr>",
									"    ",
									"      {{#if response.result.uncles}}",
									"      <tr>",
									"        <td class = \"blockInfo\"> Uncles: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.uncles}} </td>",
									"      </tr>",
									"      {{/if}}",
									"   ",
									"    </table>",
									"  `;",
									"",
									"pm.visualizer.set(table, {",
									"    response: pm.response.json(),",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockByHash\",\n    \"params\": [\n        \"0x40aff31697d62101d521017897880c72759b89d22bd1b055b4ca00a0233e1a13\",\n        true\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Getting a block by hash."
					},
					"response": []
				},
				{
					"name": "eth_getBlockByNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var table = `",
									"    <style type=\"text/css\">",
									"        table {border: 1px solid #000080; table-layout:fixed;}",
									"        td {border: 1px solid gray; word-wrap: break-word;max-width: 1000px;}",
									"        th {font-size:18px;background-color:#B0B0B0;}",
									"",
									"        .break {background-color:black;}",
									"    ",
									"        .switch {",
									"            position: relative;",
									"            display: inline-block;",
									"            width: 60px;",
									"            height: 34px;",
									"        }",
									"",
									"        .switch input {display:none;}",
									"",
									"        .slider {",
									"            position: absolute;",
									"             cursor: pointer;",
									"             top: 0;",
									"            left: 0;",
									"            right: 0;",
									"            bottom: 0;",
									"            background-color: #ccc;",
									"            -webkit-transition: .4s;",
									"            transition: .4s;",
									"        }",
									"",
									"        .slider:before {",
									"            position: absolute;",
									"            content: \"\";",
									"            height: 26px;",
									"            width: 26px;",
									"            left: 4px;",
									"            bottom: 4px;",
									"            background-color: white;",
									"            -webkit-transition: .4s;",
									"            transition: .4s;",
									"        }",
									"",
									"        input:checked + .slider {",
									"            background-color: red;",
									"        }",
									"",
									"        input:focus + .slider {",
									"             box-shadow: 0 0 1px #2196F3;",
									"        }",
									"",
									"        input:checked + .slider:before {",
									"            -webkit-transform: translateX(26px);",
									"            -ms-transform: translateX(26px);",
									"            transform: translateX(26px);",
									"        }",
									"",
									"        </style>",
									"",
									"        <b> User Friendly View: </b>",
									"        <br>",
									"        <label class=\"switch\">",
									"                <input type=\"checkbox\" onclick=\"toggle(this);\" checked=\"true\">",
									"                <div class=\"slider\"></div>",
									"        </label>",
									"        <br>",
									"        <br>",
									"",
									"    <script>",
									"",
									"        function userFriendlyViewOn (){",
									"            switchToColor();",
									"            toDec();",
									"            convertTimeUTC();",
									"        }",
									"",
									"        function userFriendlyViewOFF (){",
									"            switchToGray();",
									"            toHex();",
									"            decimalTime();",
									"        }",
									"",
									"        function toggle(checkbox) {",
									"            if (checkbox.checked) {",
									"                userFriendlyViewOn();",
									"            } else {",
									"                userFriendlyViewOFF();",
									"            }",
									"        }",
									"",
									"        function add(x, y, base) {",
									"            var z = [];",
									"            var n = Math.max(x.length, y.length);",
									"            var carry = 0;",
									"            var i = 0;",
									"            while (i < n || carry) {",
									"                var xi = i < x.length ? x[i] : 0;",
									"                var yi = i < y.length ? y[i] : 0;",
									"                var zi = carry + xi + yi;",
									"                z.push(zi % base);",
									"                carry = Math.floor(zi / base);",
									"                i++;",
									"            }",
									"            return z;",
									"        }",
									"",
									"",
									"        function multiplyByNumber(num, x, base) {",
									"            if (num < 0) return null;",
									"            if (num == 0) return [];",
									"",
									"            var result = [];",
									"            var power = x;",
									"            while (true) {",
									"                if (num & 1) {",
									"                result = add(result, power, base);",
									"                }",
									"                num = num >> 1;",
									"                if (num === 0) break;",
									"                power = add(power, power, base);",
									"            }",
									"",
									"            return result;",
									"        }",
									"",
									"        function parseToDigitsArray(str, base) {",
									"            var digits = str.split('');",
									"            var ary = [];",
									"            for (var i = digits.length - 1; i >= 0; i--) {",
									"                var n = parseInt(digits[i], base);",
									"                if (isNaN(n)) return null;",
									"                ary.push(n);",
									"            }",
									"            return ary;",
									"        }",
									"",
									"        function convertBase(str, fromBase, toBase) {",
									"            var digits = parseToDigitsArray(str, fromBase);",
									"            if (digits === null) return null;",
									"            if (digits == 0) return 0;",
									"",
									"            var outArray = [];",
									"            var power = [1];",
									"            for (var i = 0; i < digits.length; i++) {",
									"                // invariant: at this point, fromBase^i = power",
									"                if (digits[i]) {",
									"                outArray = add(outArray, multiplyByNumber(digits[i], power, toBase), toBase);",
									"                }",
									"                power = multiplyByNumber(fromBase, power, toBase);",
									"            }",
									"",
									"            var out = '';",
									"            for (var i = outArray.length - 1; i >= 0; i--) {",
									"                out += outArray[i].toString(toBase);",
									"            }",
									"            return out;",
									"        }",
									"",
									"        function toDec() {",
									"            {{#if response.result.transactions}}",
									"                var value0=document.getElementsByClassName(\"value\");",
									"                for ( let i=0; i < value0.length; i++ ){",
									"                    ",
									"                    var fullHex0 = value0[i].innerText;",
									"                    var splitHex0 = fullHex0.split(\"0x\");",
									"                    var hexWithoutOx0 = splitHex0[1];",
									"                    var hexAsString0 = hexWithoutOx0.toString();",
									"                    var decimalNumber0 = convertBase(hexAsString0, 16, 10);",
									"                    ",
									"                    value0[i].innerHTML = decimalNumber0 + \" Wei \" + \" = <b>\"  + decimalNumber0 / (10 ** 18) + \"  Avax\" +  \"</b>\" ;",
									"                }",
									"    ",
									"                var value1=document.getElementsByClassName(\"blockNumber\");",
									"                for ( let i=0; i < value1.length; i++ ){",
									"                    ",
									"                    var fullHex1 = value1[i].innerText;",
									"                    var splitHex1 = fullHex1.split(\"0x\");",
									"                    var hexWithoutOx1 = splitHex1[1];",
									"                    var hexAsString1 = hexWithoutOx1.toString();",
									"                    var decimalNumber1 = convertBase(hexAsString1, 16, 10);",
									"                ",
									"                    value1[i].innerHTML = decimalNumber1;",
									"                }",
									"",
									"                var value2=document.getElementsByClassName(\"gas\");",
									"                for ( let i=0; i < value2.length; i++ ){",
									"        ",
									"                    var fullHex2 = value2[i].innerText;",
									"                    var splitHex2 = fullHex2.split(\"0x\");",
									"                    var hexWithoutOx2 = splitHex2[1];",
									"                    var hexAsString2 = hexWithoutOx2.toString();",
									"                    var decimalNumber2 = convertBase(hexAsString2, 16, 10);",
									"                    var numberWithCommas2 = Number(decimalNumber2).toLocaleString();",
									"                    ",
									"                    value2[i].innerHTML = numberWithCommas2;",
									"                }",
									"        ",
									"        ",
									"                var value3=document.getElementsByClassName(\"gasPrice\");",
									"                for ( let i=0; i < value3.length; i++ ){",
									"                    ",
									"                    var fullHex3 = value3[i].innerText;",
									"                    var splitHex3 = fullHex3.split(\"0x\");",
									"                    var hexWithoutOx3 = splitHex3[1];",
									"                    var hexAsString3 = hexWithoutOx3.toString();",
									"                    var decimalNumber3 = convertBase(hexAsString3, 16, 10);",
									"                    var nAvax3 = decimalNumber3 / (10 ** 9);",
									"                    ",
									"                    value3[i].innerHTML = decimalNumber3 + \" Wei \" + \" = <b>\"  +  nAvax3 +  \" nAvax </b>\" ;",
									"                }",
									"        ",
									"                ",
									"                var value4 = document.getElementsByClassName(\"maxFeePerGas\");",
									"                for ( let i=0; i < value4.length; i++ ){",
									"                        ",
									"                    var fullHex4 = value4[i].innerText;",
									"                    var splitHex4 = fullHex4.split(\"0x\");",
									"                    var hexWithoutOx4 = splitHex4[1];",
									"                    var hexAsString4 = hexWithoutOx4.toString();",
									"                    var decimalNumber4 = convertBase(hexAsString4, 16, 10);",
									"                    var nAvax4 = decimalNumber4 / (10 ** 9);",
									"                        ",
									"                    value4[i].innerHTML = decimalNumber4 + \" Wei \" + \" = <b>\"  +  nAvax4 +  \" nAvax </b>\" ;",
									"                }",
									"            ",
									"                var value5 = document.getElementsByClassName(\"maxPriorityFeePerGas\");",
									"                for ( let i=0; i < value5.length; i++ ){",
									"                        ",
									"                    var fullHex5 = value5[i].innerText;",
									"                    var splitHex5 = fullHex5.split(\"0x\");",
									"                    var hexWithoutOx5 = splitHex5[1];",
									"                    var hexAsString5 = hexWithoutOx5.toString();",
									"                    var decimalNumber5 = convertBase(hexAsString5, 16, 10);",
									"                    var nAvax5 = decimalNumber5 / (10 ** 9);",
									"                        ",
									"                    value5[i].innerHTML = decimalNumber5 + \" Wei \" + \" = <b>\"  +  nAvax5 +  \" nAvax </b>\" ;",
									"                }",
									"            ",
									"                var value6=document.getElementsByClassName(\"nonce\");",
									"                for ( let i=0; i < value6.length; i++ ){",
									"                    ",
									"                    var fullHex6 = value6[i].innerText;",
									"                    var splitHex6 = fullHex6.split(\"0x\");",
									"                    var hexWithoutOx6 = splitHex6[1];",
									"                    var hexAsString6 = hexWithoutOx6.toString();",
									"                    var decimalNumber6 = convertBase(hexAsString6, 16, 10);",
									"                    ",
									"                    value6[i].innerHTML = decimalNumber6;",
									"                }",
									"        ",
									"                var value7=document.getElementsByClassName(\"transactionIndex\");",
									"                for ( let i=0; i < value7.length; i++ ){",
									"                    ",
									"                    var fullHex7 = value7[i].innerText;",
									"                    var splitHex7 = fullHex7.split(\"0x\");",
									"                    var hexWithoutOx7 = splitHex7[1];",
									"                    var hexAsString7 = hexWithoutOx7.toString();",
									"                    var decimalNumber7 = convertBase(hexAsString7, 16, 10);",
									"                    ",
									"                    value7[i].innerHTML = decimalNumber7;",
									"                }",
									"        ",
									"                var value8=document.getElementsByClassName(\"type\");",
									"                for ( let i=0; i < value8.length; i++ ){",
									"                    ",
									"                    var fullHex8 = value8[i].innerText;",
									"                    var splitHex8 = fullHex8.split(\"0x\");",
									"                    var hexWithoutOx8 = splitHex8[1];",
									"                    var hexAsString8 = hexWithoutOx8.toString();",
									"                    var decimalNumber8 = convertBase(hexAsString8, 16, 10);",
									"                    ",
									"                    if( decimalNumber8 == 0 ) {",
									"                        value8[i].innerHTML = decimalNumber8 + \" (legacy)\";",
									"                    } else if( decimalNumber8 == 2) {",
									"                        value8[i].innerHTML = decimalNumber8 + \" (EIP-1559)\";",
									"                    }",
									"                }",
									"            ",
									"                var value9=document.getElementsByClassName(\"chainId\");",
									"                for ( let i=0; i < value9.length; i++ ){",
									"                    ",
									"                    var fullHex9 = value9[i].innerText;",
									"                    var splitHex9 = fullHex9.split(\"0x\");",
									"                    var hexWithoutOx9 = splitHex9[1];",
									"                    var hexAsString9 = hexWithoutOx9.toString();",
									"                    var decimalNumber9 = convertBase(hexAsString9, 16, 10);",
									"                    ",
									"                    value9[i].innerHTML = decimalNumber9;",
									"                }",
									"            {{/if}}",
									"            ",
									"            {{#if response.result.baseFeePerGas}}",
									"                var value10=document.getElementById(\"baseFeePerGas\");",
									"",
									"                var fullHex10 = value10.innerText;",
									"                var splitHex10 = fullHex10.split(\"0x\");",
									"                var hexWithoutOx10 = splitHex10[1];",
									"                var hexAsString10 = hexWithoutOx10.toString();",
									"                var decimalNumber10 = convertBase(hexAsString10, 16, 10);",
									"                var nAvax10 = decimalNumber10 / (10 ** 9);",
									"                    ",
									"                value10.innerHTML = decimalNumber10 + \" Wei \" + \" = <b>\"  +  nAvax10 +  \" nAvax </b>\" ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.blockGasCost}}",
									"                var value11=document.getElementById(\"blockGasCost\");",
									"                    ",
									"                var fullHex11 = value11.innerText;",
									"                var splitHex11 = fullHex11.split(\"0x\");",
									"                var hexWithoutOx11 = splitHex11[1];",
									"                var hexAsString11 = hexWithoutOx11.toString();",
									"                var decimalNumber11 = convertBase(hexAsString11, 16, 10);",
									"                var nAvax11 = decimalNumber11 / (10 ** 9);",
									"                    ",
									"                value11.innerHTML = decimalNumber11 + \" Wei \" + \" = <b>\"  +  nAvax11 +  \" nAvax </b>\" ;",
									"            {{/if}}",
									"        ",
									"            {{#if response.result.difficulty}}",
									"                var value12=document.getElementById(\"difficulty\");",
									"                ",
									"                var fullHex12 = value12.innerText;",
									"                var splitHex12 = fullHex12.split(\"0x\");",
									"                var hexWithoutOx12 = splitHex12[1];",
									"                var hexAsString12 = hexWithoutOx12.toString();",
									"                var decimalNumber12 = convertBase(hexAsString12, 16, 10);",
									"                    ",
									"                value12.innerHTML = decimalNumber12;",
									"            {{/if}}",
									"",
									"            {{#if response.result.totalDifficulty}}",
									"                var value13 = document.getElementById(\"totalDifficulty\");",
									"                ",
									"                var fullHex13 = value13.innerText;",
									"                var splitHex13 = fullHex13.split(\"0x\");",
									"                var hexWithoutOx13 = splitHex13[1];",
									"                var hexAsString13 = hexWithoutOx13.toString();",
									"                var decimalNumber13 = convertBase(hexAsString13, 16, 10);",
									"                var numberWithCommas13 = Number(decimalNumber13).toLocaleString();",
									"                    ",
									"                value13.innerHTML = numberWithCommas13;",
									"            {{/if}}",
									"",
									"            {{#if response.result.gasLimit}}",
									"                var value14 = document.getElementById(\"gasLimit\");",
									"                ",
									"                var fullHex14 = value14.innerText;",
									"                var splitHex14 = fullHex14.split(\"0x\");",
									"                var hexWithoutOx14 = splitHex14[1];",
									"                var hexAsString14 = hexWithoutOx14.toString();",
									"                var decimalNumber14 = convertBase(hexAsString14, 16, 10);",
									"                var numberWithCommas14 = Number(decimalNumber14).toLocaleString();",
									"                    ",
									"                value14.innerHTML = numberWithCommas14;",
									"            {{/if}}",
									"",
									"            {{#if response.result.gasUsed}}",
									"                var value15 = document.getElementById(\"gasUsed\");",
									"                ",
									"                var fullHex15 = value15.innerText;",
									"                var splitHex15 = fullHex15.split(\"0x\");",
									"                var hexWithoutOx15 = splitHex15[1];",
									"                var hexAsString15 = hexWithoutOx15.toString();",
									"                var decimalNumber15 = convertBase(hexAsString15, 16, 10);",
									"                var numberWithCommas15 = Number(decimalNumber15).toLocaleString();",
									"                var percent = (decimalNumber15 * 100)/ decimalNumber14;",
									"                var percentRounded = percent.toFixed(2);",
									"                    ",
									"                value15.innerHTML = numberWithCommas15 + \" (\" + percentRounded + \"%)\" ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.number}}",
									"                var value16=document.getElementById(\"number\");",
									"                ",
									"                var fullHex16 = value16.innerText;",
									"                var splitHex16 = fullHex16.split(\"0x\");",
									"                var hexWithoutOx16 = splitHex16[1];",
									"                var hexAsString16 = hexWithoutOx16.toString();",
									"                var decimalNumber16 = convertBase(hexAsString16, 16, 10);",
									"                    ",
									"                value16.innerHTML = decimalNumber16;",
									"            {{/if}}",
									"",
									"            {{#if response.result.size}}",
									"                var value17 = document.getElementById(\"size\");",
									"                ",
									"                var fullHex17 = value17.innerText;",
									"                var splitHex17 = fullHex17.split(\"0x\");",
									"                var hexWithoutOx17 = splitHex17[1];",
									"                var hexAsString17 = hexWithoutOx17.toString();",
									"                var decimalNumber17 = convertBase(hexAsString17, 16, 10);",
									"                var numberWithCommas17 = Number(decimalNumber17).toLocaleString();",
									"                    ",
									"                value17.innerHTML = numberWithCommas17 + \" bytes\";",
									"            {{/if}}",
									"",
									"            {{#if response.result.extDataGasUsed}}",
									"                var value18 = document.getElementById(\"extDataGasUsed\");",
									"                ",
									"                var fullHex18 = value18.innerText;",
									"                var splitHex18 = fullHex18.split(\"0x\");",
									"                var hexWithoutOx18 = splitHex18[1];",
									"                var hexAsString18 = hexWithoutOx18.toString();",
									"                var decimalNumber18 = convertBase(hexAsString18, 16, 10);",
									"                var numberWithCommas18 = Number(decimalNumber18).toLocaleString();",
									"                    ",
									"                value18.innerHTML = numberWithCommas18;",
									"            {{/if}}",
									"",
									"        }  ",
									"",
									"        function toHex() {",
									"            {{#if response.result.transactions}}",
									"                var value0=document.getElementsByClassName(\"value\");",
									"                for ( let i=0; i < value0.length; i++ ){",
									"                    ",
									"                    var decNumber0 = value0[i].innerText;",
									"                    var getNumber0 = decNumber0.split(' Wei');",
									"                    var obtainedNumber0 = getNumber0[0];",
									"                    var asString0 = obtainedNumber0.toString();",
									"                    var hexString0 = convertBase(asString0, 10, 16);",
									"",
									"                    value0[i].innerHTML = \"0x\" +  hexString0  ;",
									"                }",
									"    ",
									"                var value1=document.getElementsByClassName(\"blockNumber\");",
									"                for ( let i=0; i < value1.length; i++ ){",
									"                    ",
									"                    var decNumber1 = value1[i].innerText;",
									"                    var asString1 = decNumber1.toString();",
									"                    var hexString1 = convertBase(asString1, 10, 16);",
									"",
									"                    value1[i].innerHTML = \"0x\" + hexString1 ;",
									"                }",
									"",
									"                var value2=document.getElementsByClassName(\"gas\");",
									"                for ( let i=0; i < value2.length; i++ ){",
									"                    ",
									"                    var decNumber2 = value2[i].innerText;",
									"                    var removeCommas2 = parseFloat(decNumber2.toString().replace(/,/g, \"\"));",
									"                    var asString2 = removeCommas2.toString();",
									"                    var hexString2 = convertBase(asString2, 10, 16);",
									"                    ",
									"                    value2[i].innerHTML = \"0x\" + hexString2 ;",
									"                }",
									"        ",
									"                var value3=document.getElementsByClassName(\"gasPrice\");",
									"                for ( let i=0; i < value3.length; i++ ){",
									"                    ",
									"                    var decNumber3 = value3[i].innerText;",
									"                    var getNumber3 = decNumber3.split(' Wei');",
									"                    var obtainedNumber3 = getNumber3[0];",
									"                    var asString3 = obtainedNumber3.toString();",
									"                    var hexString3 = convertBase(asString3, 10, 16);",
									"",
									"                    value3[i].innerHTML = \"0x\" +  hexString3  ;",
									"                }",
									"        ",
									"                var value4 = document.getElementsByClassName(\"maxFeePerGas\");",
									"                for ( let i=0; i < value4.length; i++ ){",
									"                        ",
									"                    var decNumber4 = value4[i].innerText;",
									"                    var getNumber4 = decNumber4.split(' Wei');",
									"                    var obtainedNumber4 = getNumber4[0];",
									"                    var asString4 = obtainedNumber4.toString();",
									"                    var hexString4 = convertBase(asString4, 10, 16);",
									"",
									"                    value4[i].innerHTML = \"0x\" +  hexString4  ;",
									"                }",
									"            ",
									"                var value5 = document.getElementsByClassName(\"maxPriorityFeePerGas\");",
									"                for ( let i=0; i < value5.length; i++ ){",
									"                        ",
									"                    var decNumber5 = value5[i].innerText;",
									"                    var getNumber5 = decNumber5.split(' Wei');",
									"                    var obtainedNumber5 = getNumber5[0];",
									"                    var asString5 = obtainedNumber5.toString();",
									"                    var hexString5 = convertBase(asString5, 10, 16);",
									"",
									"                    value5[i].innerHTML = \"0x\" +  hexString5  ;",
									"                }",
									"            ",
									"                var value6=document.getElementsByClassName(\"nonce\");",
									"                for ( let i=0; i < value6.length; i++ ){",
									"                    ",
									"                    var decNumber6 = value6[i].innerText;",
									"                    var asString6 = decNumber6.toString();",
									"                    var hexString6 = convertBase(asString6, 10, 16);",
									"",
									"                    value6[i].innerHTML = \"0x\" + hexString6 ;",
									"                }",
									"        ",
									"                var value7=document.getElementsByClassName(\"transactionIndex\");",
									"                for ( let i=0; i < value7.length; i++ ){",
									"                    ",
									"                    var decNumber7 = value7[i].innerText;",
									"                    var asString7 = decNumber7.toString();",
									"                    var hexString7 = convertBase(asString7, 10, 16);",
									"",
									"                    value7[i].innerHTML = \"0x\" + hexString7 ;",
									"                }",
									"        ",
									"                var value8=document.getElementsByClassName(\"type\");",
									"                for ( let i=0; i < value8.length; i++ ){",
									"                    ",
									"                    var decNumber8 = value8[i].innerText;",
									"                    var getNumber8 = decNumber8.split(' (');",
									"                    var obtainedNumber8 = getNumber8[0];",
									"                    var asString8 = obtainedNumber8.toString();",
									"                    var hexString8 = convertBase(asString8, 10, 16);",
									"",
									"                    value8[i].innerHTML = \"0x\" +  hexString8  ;      ",
									"                }",
									"            ",
									"                var value9=document.getElementsByClassName(\"chainId\");",
									"                for ( let i=0; i < value9.length; i++ ){",
									"                    ",
									"                    var decNumber9 = value9[i].innerText;",
									"                    var asString9 = decNumber9.toString();",
									"                    var hexString9 = convertBase(asString9, 10, 16);",
									"",
									"                    value9[i].innerHTML = \"0x\" + hexString9 ;",
									"                }",
									"            {{/if}}",
									"",
									"            {{#if response.result.baseFeePerGas}}",
									"                var value10 = document.getElementById(\"baseFeePerGas\");",
									"",
									"                var decNumber10 = value10.innerText;",
									"                var getNumber10 = decNumber10.split(' Wei');",
									"                var obtainedNumber10 = getNumber10[0];",
									"                var asString10 = obtainedNumber10.toString();",
									"                var hexString10 = convertBase(asString10, 10, 16);",
									"",
									"                value10.innerHTML = \"0x\" +  hexString10  ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.blockGasCost}}",
									"                var value11 = document.getElementById(\"blockGasCost\");",
									"",
									"                var decNumber11 = value11.innerText;",
									"                var getNumber11 = decNumber11.split(' Wei');",
									"                var obtainedNumber11 = getNumber11[0];",
									"                var asString11 = obtainedNumber11.toString();",
									"                var hexString11 = convertBase(asString11, 10, 16);",
									"",
									"                value11.innerHTML = \"0x\" +  hexString11  ;",
									"            {{/if}}",
									"            ",
									"            {{#if response.result.difficulty}}",
									"                var value12=document.getElementById(\"difficulty\");",
									"                    ",
									"                var decNumber12 = value12.innerText;",
									"                var asString12 = decNumber12.toString();",
									"                var hexString12 = convertBase(asString12, 10, 16);",
									"",
									"                value12.innerHTML = \"0x\" + hexString12 ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.totalDifficulty}}",
									"                var value13=document.getElementById(\"totalDifficulty\");",
									"",
									"                var decNumber13 = value13.innerText;",
									"                var removeCommas13 = parseFloat(decNumber13.toString().replace(/,/g, \"\"));",
									"                var asString13 = removeCommas13.toString();",
									"                var hexString13 = convertBase(asString13, 10, 16);",
									"                    ",
									"                value13.innerHTML = \"0x\" + hexString13 ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.gasLimit}}",
									"                var value14 = document.getElementById(\"gasLimit\");",
									"                var decNumber14 = value14.innerText;",
									"                var removeCommas14 = parseFloat(decNumber14.toString().replace(/,/g, \"\"));",
									"                var asString14 = removeCommas14.toString();",
									"                var hexString14 = convertBase(asString14, 10, 16);",
									"                    ",
									"                value14.innerHTML = \"0x\" + hexString14 ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.gasUsed}}",
									"                var value15 = document.getElementById(\"gasUsed\");",
									"                var decNumber15 = value15.innerText;",
									"                var getNumber15 = decNumber15.split(' (');",
									"                var lng = getNumber15.length;",
									"                var removeCommas15 = parseFloat(getNumber15[lng-2].toString().replace(/,/g, \"\"));",
									"                var asString15 = removeCommas15.toString();",
									"                var hexString15 = convertBase(asString15, 10, 16);",
									"                ",
									"                value15.innerHTML = \"0x\" + hexString15 ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.number}}",
									"                var value16=document.getElementById(\"number\");",
									"                    ",
									"                var decNumber16 = value16.innerText;",
									"                var asString16 = decNumber16.toString();",
									"                var hexString16 = convertBase(asString16, 10, 16);",
									"",
									"                value16.innerHTML = \"0x\" + hexString16 ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.size}}",
									"                var value16 = document.getElementById(\"size\");",
									"                var decNumber16 = value16.innerText;",
									"                var getNumber16 = decNumber16.split(' bytes');",
									"                var removeCommas16 = parseFloat(getNumber16[0].toString().replace(/,/g, \"\"));",
									"                var asString16 = removeCommas16.toString();",
									"                var hexString16 = convertBase(asString16, 10, 16);",
									"                ",
									"                value16.innerHTML = \"0x\" + hexString16 ;",
									"            {{/if}}",
									"",
									"            {{#if response.result.extDataGasUsed}}",
									"                var value17 = document.getElementById(\"extDataGasUsed\");",
									"                var decNumber17 = value17.innerText;",
									"                var removeCommas17 = parseFloat(decNumber17.toString().replace(/,/g, \"\"));",
									"                var asString17 = removeCommas17.toString();",
									"                var hexString17 = convertBase(asString17, 10, 16);",
									"                    ",
									"                value17.innerHTML = \"0x\" + hexString17 ;",
									"            {{/if}}",
									"                ",
									"        }  ",
									"        ",
									"        function convertTimeUTC() {",
									"            var timestamp={{response.result.timestamp}};",
									"",
									"            var d = new Date(timestamp * 1000), ",
									"                yyyy = d.getFullYear(),",
									"                mm = ('0' + (d.getMonth() + 1)).slice(-2),  ",
									"                dd = ('0' + d.getDate()).slice(-2),       ",
									"                hh = d.getHours(),",
									"                h = hh,",
									"                min = ('0' + d.getMinutes()).slice(-2),     ",
									"                sec = ('0' + d.getSeconds()).slice(-2),",
									"                ampm = 'AM',",
									"                x=d.toUTCString();",
									"                time;",
									"",
									"            if (hh > 12) {",
									"                h = hh - 12;",
									"                ampm = 'PM';",
									"            } else if (hh === 12) {",
									"                h = 12;",
									"                ampm = 'PM';",
									"            } else if (hh == 0) {",
									"                h = 12;",
									"            }",
									"",
									"            ",
									"            time = yyyy + \"-\" + mm + \"-\" + dd + \", \" + h + \":\" + min + \":\" + sec + \" \" + ampm;",
									"            ",
									"            var createDate = new Date();",
									"            var offset = createDate.getTimezoneOffset(); ",
									"            var createDate = (-offset)/60;",
									"",
									"            const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;",
									"",
									"",
									"            var showTime=document.getElementById(\"time\");",
									"            if ( createDate > 0 ) {",
									"                showTime.innerHTML = time + \" \" + \"UTC +\" + createDate + \" (\" + timezone + \")\";",
									"                }",
									"            else {",
									"                showTime.innerHTML = time + \" \" + \"UTC \" + createDate;",
									"            }",
									"",
									"        }",
									"",
									"        function decimalTime() {",
									"            var showTime=document.getElementById(\"time\");",
									"            showTime.innerHTML = {{response.result.timestamp}};",
									"        }",
									"",
									"        function switchToColor() { ",
									"            var block = document.getElementsByClassName(\"blockInfo\");",
									"            for (let i = 0; i < block.length; i++) {",
									"                block[i].style.backgroundColor = \"#F2D9D9\";",
									"                }",
									"",
									"            var block2 = document.getElementsByClassName(\"blockInfo2\")",
									"            for (let i = 0; i < block2.length; i++) {",
									"                block2[i].style.backgroundColor = \"#FFFDD0\";",
									"                }",
									"            ",
									"            var txHeader = document.getElementById(\"transactionsHeader\");",
									"            txHeader.style.backgroundColor = \"#FFDEAD\";",
									"",
									"            var tx = document.getElementsByClassName(\"txInfo\");",
									"            for (let i = 0; i < tx.length; i++) {",
									"                tx[i].style.backgroundColor = \"#F0F8FF\";",
									"                }",
									"    ",
									"            var gas = document.getElementsByClassName(\"gasInfo\");",
									"            for (let i = 0; i < gas.length; i++) {",
									"                gas[i].style.backgroundColor = \"#FFCCCB\";",
									"                }",
									"        ",
									"            var vrs = document.getElementsByClassName(\"vrs\");",
									"            for (let i = 0; i < vrs.length; i++) {",
									"                vrs[i].style.backgroundColor = \"#E6E6FA\";",
									"                }",
									"        ",
									"            var chain = document.getElementsByClassName(\"chainInfo\");",
									"            for (let i = 0; i < chain.length; i++) {",
									"                chain[i].style.backgroundColor = \"#ECFFDC\";",
									"                }",
									"",
									"        }",
									"",
									"        function switchToGray() { ",
									"            var block = document.getElementsByClassName(\"blockInfo\");",
									"            for (let i = 0; i < block.length; i++) {",
									"                block[i].style.backgroundColor = \"transparent\";",
									"                }",
									"",
									"            var block2 = document.getElementsByClassName(\"blockInfo2\")",
									"            for (let i = 0; i < block2.length; i++) {",
									"                block2[i].style.backgroundColor = \"transparent\";",
									"                }",
									"",
									"            var txHeader = document.getElementById(\"transactionsHeader\");",
									"            txHeader.style.backgroundColor = \"transparent\";",
									"",
									"            var tx = document.getElementsByClassName(\"txInfo\");",
									"            for (let i = 0; i < tx.length; i++) {",
									"                tx[i].style.backgroundColor = \"transparent\";",
									"                }",
									"    ",
									"            var gas = document.getElementsByClassName(\"gasInfo\");",
									"            for (let i = 0; i < gas.length; i++) {",
									"                gas[i].style.backgroundColor = \"transparent\";",
									"                }",
									"        ",
									"            var vrs = document.getElementsByClassName(\"vrs\");",
									"            for (let i = 0; i < vrs.length; i++) {",
									"                vrs[i].style.backgroundColor = \"transparent\";",
									"                }",
									"        ",
									"            const chain = document.getElementsByClassName(\"chainInfo\");",
									"            for (let i = 0; i < chain.length; i++) {",
									"                chain[i].style.backgroundColor = \"transparent\";",
									"                }",
									"",
									"        }",
									"",
									"    </script>",
									"",
									"    <body onLoad = \"userFriendlyViewOn()\">",
									"",
									"    <table>",
									"        <tr>",
									"            <th colspan=\"3\"> Block: </th>",
									"        </tr>",
									"            ",
									"        <tr>",
									"        <td class = \"blockInfo\"> Base fee per gas: </td>",
									"        <td class = \"blockInfo\" id=\"baseFeePerGas\" colspan=\"2\"> {{response.result.baseFeePerGas}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Block gas cost: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"blockGasCost\"> {{response.result.blockGasCost}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Difficulty: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"difficulty\"> {{response.result.difficulty}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Extra gas used: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"extDataGasUsed\"> {{response.result.extDataGasUsed}} </td>",
									"        </tr>",
									"",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Extra data hash: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.extDataHash}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Extra data: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.extraData}} </td>",
									"        </tr>",
									"",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Gas limit: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"gasLimit\"> {{response.result.gasLimit}} </td>",
									"        </tr>",
									"",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Gas used: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"gasUsed\"> {{response.result.gasUsed}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Hash: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.hash}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Logs bloom: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.logsBloom}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Miner: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.miner}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Mix hash: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.mixHash}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Nonce: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"nonce\"> {{response.result.nonce}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Number: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"number\"> {{response.result.number}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Parent hash: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.parentHash}} </td>",
									"        </tr>",
									"        ",
									"        <tr>",
									"        <td class = \"blockInfo\"> Receipts root: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.receiptsRoot}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Sha3 uncles: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.sha3Uncles}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Size: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"size\"> {{response.result.size}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> State root: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.stateRoot}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Timestamp: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"time\"> {{response.result.timestamp}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"        <td class = \"blockInfo\"> Total difficulty: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\" id=\"totalDifficulty\"> {{response.result.totalDifficulty}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td colspan=\"3\" id=\"transactionsHeader\"> Block's transactions: </td>",
									"        </tr>",
									"        ",
									"        {{#each response.result.transactions}}",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"blockInfo2\"> Block hash: </td>",
									"            <td class = \"blockInfo2\" colspan=\"2\"> {{blockHash}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"blockInfo2\"> Block number: </td>",
									"            <td class = \"blockInfo2 blockNumber\"> {{blockNumber}}</td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td>",
									"            <td class = \"gasInfo\"> Gas: </td>",
									"            <td class = \"gasInfo gas\"> {{gas}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"gasInfo\"> Gas price: </td>",
									"            <td class = \"gasInfo gasPrice\"> {{gasPrice}} </td>",
									"        </tr>",
									"        ",
									"        {{#if maxFeePerGas}}",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"gasInfo\"> Max fee per gas: </td>",
									"            <td class = \"gasInfo maxFeePerGas\"> {{maxFeePerGas}} </td>",
									"        </tr>",
									"        {{/if}}",
									"  ",
									"",
									"        {{#if maxPriorityFeePerGas}}",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"gasInfo\"> Max priority fee per gas: </td>",
									"            <td class = \"gasInfo maxPriorityFeePerGas\"> {{maxPriorityFeePerGas}} </td>",
									"        </tr>",
									"        {{/if}}",
									"       ",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Transaction Hash: </td>",
									"            <td class = \"txInfo\"> {{hash}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Input: </td>",
									"            <td class = \"txInfo\"> {{input}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Nonce: </td>",
									"            <td class = \"txInfo nonce\"> {{nonce}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> From: </td>",
									"            <td class = \"txInfo\"> {{from}} </td>",
									"        </tr>",
									"      ",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> To: </td>",
									"            <td class = \"txInfo\"> {{to}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Transaction index: </td>",
									"            <td class = \"txInfo transactionIndex\"> {{transactionIndex}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Value: </td>",
									"            <td class = \"txInfo value\"> {{value}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Type: </td>",
									"            <td class = \"txInfo type\"> {{type}} </td>",
									"        </tr>",
									"",
									"        {{#if response.result.accessList}}",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"txInfo\"> Input: </td>",
									"            <td class = \"txInfo\"> {{accessList}} </td>",
									"        </tr>",
									"        {{/if}}",
									"     ",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"chainInfo\"> Chain ID: </td>",
									"            <td class = \"chainInfo chainId\"> {{chainId}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"vrs\"> v: </td>",
									"            <td class = \"vrs\"> {{v}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"vrs\"> r: </td>",
									"            <td class = \"vrs\"> {{r}} </td>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td> </td>",
									"            <td class = \"vrs\"> s: </td>",
									"            <td class = \"vrs\"> {{s}} </td>",
									"        </tr>",
									"",
									"          <tr>",
									"            <td> </td>",
									"            <td class = \"break\"> </td>",
									"            <td class = \"break\"> </td>",
									"        </tr>",
									"",
									"        {{/each}}",
									"",
									"      <tr>",
									"        <td class = \"blockInfo\"> Transactions root: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.transactionsRoot}} </td>",
									"      </tr>",
									"    ",
									"      {{#if response.result.uncles}}",
									"      <tr>",
									"        <td class = \"blockInfo\"> Uncles: </td>",
									"        <td class = \"blockInfo\" colspan=\"2\"> {{response.result.uncles}} </td>",
									"      </tr>",
									"      {{/if}}",
									"   ",
									"    </table>",
									"  `;",
									"",
									"pm.visualizer.set(table, {",
									"    response: pm.response.json(),",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockByNumber\",\n    \"params\": [\n        \"0x1e5e0e5\",\n        true\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Getting a block by number."
					},
					"response": []
				},
				{
					"name": "eth_getTransactionByHash",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByHash\",\n    \"params\": [\n        \"0xd33150a3f3783f29084eee4e12098f3ef707557f8deb916677a9af68e05613b7\"\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Getting a transaction by hash."
					},
					"response": []
				},
				{
					"name": "eth_getTransactionReceipt",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionReceipt\",\n    \"params\": [\n        \"0xd33150a3f3783f29084eee4e12098f3ef707557f8deb916677a9af68e05613b7\"\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Getting a transaction receipt."
					},
					"response": []
				},
				{
					"name": "export",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\" :\"avax.export\",\n    \"params\" :{\n        \"from\": [\"{{cchainAddress}}\"],\n        \"to\":\"{{xchainAddress}}\",\n        \"amount\": 25,\n        \"changeAddr\": \"{{cchainAddress}}\",\n        \"assetID\": \"FSznYPiqrJ3WtGurw54re47oDpGXQ8THc8yZ4fEDX4G8cGqbn\",\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\"\n    },\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/avax",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"avax"
							]
						},
						"description": "Send AVAX from the X-Chain to an account on the P-Chain.  \nAfter calling this method, you must call the P-Chain’s `importAVAX` method to complete the transfer. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#avaxexport)"
					},
					"response": []
				},
				{
					"name": "exportAVAX",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\" :\"avax.exportAVAX\",\n    \"params\" :{\n        \"from\": [\"{{cchainAddress}}\"],\n        \"to\":\"{{xchainAddress}}\",\n        \"amount\": 999000000,\n        \"destinationChain\": \"X\",\n        \"changeAddr\": \"{{cchainAddress}}\",\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\" \n    },\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/avax",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"avax"
							]
						},
						"description": "Send AVAX from the X-Chain to an account on the P-Chain.  \nAfter calling this method, you must call the P-Chain’s `importAVAX` method to complete the transfer. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#avaxexportavax)"
					},
					"response": []
				},
				{
					"name": "exportKey",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\" :\"avax.exportKey\",\n    \"params\" :{\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\",\n        \"address\": \"{{cchainAddress}}\"\n    },\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/avax",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"avax"
							]
						},
						"description": "Get the private key that controls a given address.  \nThe returned private key can be added to a user with `avm.importKey`. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#avaxexportkey)"
					},
					"response": []
				},
				{
					"name": "getAtomicTx",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avax.getAtomicTx\",\n    \"params\" :{\n        \"txID\":\"2GD5SRYJQr2kw5jE73trBFiAgVQyrCaeg223TaTyJFYXf2kPty\",\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/avax",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"avax"
							]
						},
						"description": "Returns the specified transaction [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#avaxgetatomictx)"
					},
					"response": []
				},
				{
					"name": "getAtomicTxStatus",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"avax.getAtomicTxStatus\",\n    \"params\": {\n        \"txID\": \"n1D9UkjiryEBtW8qznD1TDkGEuYRFj5tLaS8NhVpMLYsx1FHa\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/avax",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"avax"
							]
						},
						"description": "Get the status of a transaction sent to the network. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#avaxgetatomictxstatus)"
					},
					"response": []
				},
				{
					"name": "getUTXOs",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"avax.getUTXOs\",\n    \"params\" :{\n        \"addresses\":[\"{{cchainbech32address}}\"],\n        \"sourceChain\": \"X\",\n        \"limit\": 5,\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/avax",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"avax"
							]
						},
						"description": "Get the UTXOs that reference a given address. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#avaxgetutxos)"
					},
					"response": []
				},
				{
					"name": "import",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"avax.import\",\n    \"params\": {\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\",\n        \"sourceChain\": \"X\",\n        \"to\":\"{{cchainAddress}}\"\n    },\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/avax",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"avax"
							]
						},
						"description": "Send AVAX from the X-Chain to an account on the P-Chain.  \nAfter calling this method, you must call the P-Chain’s `importAVAX` method to complete the transfer. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#avaximport)"
					},
					"response": []
				},
				{
					"name": "importAVAX",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"avax.importAVAX\",\n    \"params\": {\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\",\n        \"sourceChain\": \"X\",\n        \"to\":\"{{cchainAddress}}\"\n    },\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/avax",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"avax"
							]
						},
						"description": "Import AVAX from the X-Chain to an account on the C-Chain.  \nBefore calling this method, you must call the X-Chain’s `exportAVAX` method to initiate the transfer. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#avaximportavax)"
					},
					"response": []
				},
				{
					"name": "importKey",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"method\": \"avax.importKey\",\n    \"params\": {\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\",\n        \"privateKey\":\"{{privkey}}\"\n    },\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/avax",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"avax"
							]
						},
						"description": "Give a user control over an address by providing the private key that controls the address. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#avaximportkey)"
					},
					"response": []
				},
				{
					"name": "issueTx",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     : 1,\n    \"method\" :\"avax.issueTx\",\n    \"params\" :{\n        \"tx\":\"0x00\",\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/avax",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"avax"
							]
						},
						"description": "Send a signed transaction to the network. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#avaxissuetx)"
					},
					"response": []
				},
				{
					"name": "net_version",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"net_version\",\n    \"params\": [],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Getting the network ID."
					},
					"response": []
				},
				{
					"name": "personal_newAccount",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"personal_newAccount\",\n    \"params\": [\n        \"cheese\"\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Creating a new account (private key generated automatically)\n\nThe EVM will create a new account using the passphrase `cheese` to encrypt and store the new account credentials. cheese is not the seed phrase and cannot be used to restore this account from scratch. Calling this function repeatedly with the same passphrase will create multiple unique accounts. Also keep in mind there are no options to export private keys stored in the EVM database. Users are encouraged to use wallet software instead for safer account creation and backup. This method is more suitable for quick account creation for a testnet."
					},
					"response": []
				},
				{
					"name": "personal_importRawKey",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"personal_importRawKey\",\n    \"params\": [\n        \"627119bb8286874a15d562d32829613311a678da26ca7a6a785ec4ad85937d07\",\n        \"{{cchainPassphrase}}\"\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Creating a new account (using plaintext private key).\n\nIf the private key is known upfront, it can be provided as plaintext to load into the EVM account database. For more secure account management, consider using wallet software instead. The example below loads the private key `0x627119bb8286874a15d562d32829613311a678da26ca7a6a785ec4ad85937d06` with the passphrase `this is my passphrase`. Note that `0x` prefix cannot be included in the private key argument, otherwise the EVM will throw an error. The example response returns the associated public key."
					},
					"response": []
				},
				{
					"name": "personal_listAccounts",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"personal_listAccounts\",\n    \"params\": [],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Listing accounts loaded in EVM node."
					},
					"response": []
				},
				{
					"name": "personal_unlockAccount",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"personal_unlockAccount\",\n    \"params\": [\n        \"{{cchainAddress}}\",\n        \"{{cchainPassphrase}}\",\n        600\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Unlocking an account.\n\nPersonal accounts loaded directly in the EVM can only sign transactions while in an unlocked state. The example below unlocks the listed account address for 60 seconds. Note the associated passphrase `cheese` must be provided for authorization."
					},
					"response": []
				},
				{
					"name": "txpool_status",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"txpool_status\",\n    \"params\": [],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Getting count of pending transactions.\n\n“Pending” transactions will be non-zero during periods of heavy network use. “Queued” transactions indicate transactions have been submitted with nonce values ahead of the next expected value for an address, which places them on hold until a transaction with the next expected nonce value is submitted."
					},
					"response": []
				},
				{
					"name": "web3_clientVersion",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"web3_clientVersion\",\n    \"params\": [],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Getting the current client version."
					},
					"response": []
				},
				{
					"name": "web3_sha3",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"web3_sha3\",\n    \"params\": [\n        \"0x736e6f7773746f726d\"\n    ],\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/rpc",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"rpc"
							]
						},
						"description": "Calculate a cryptographic hash.\n\nThe input parameter contains hexidecimal bytes of arbitrary length. The example here uses the UTF-8 text string “snowstorm” converted to hexidecimal bytes."
					},
					"response": []
				},
				{
					"name": "admin_setLogLevel",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.setLogLevel\",\n    \"params\": {\n        \"level\":\"info\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"admin"
							]
						},
						"description": "Sets the log level of the C-Chain. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#adminsetloglevel)"
					},
					"response": []
				},
				{
					"name": "admin_startCPUProfiler",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.startCPUProfiler\",\n    \"params\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"admin"
							]
						},
						"description": "Starts a CPU profile. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#adminstartcpuprofiler)"
					},
					"response": []
				},
				{
					"name": "admin_stopCPUProfiler",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.stopCPUProfiler\",\n    \"params\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"admin"
							]
						},
						"description": "Stops and writes a CPU profile. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#adminstopcpuprofiler)"
					},
					"response": []
				},
				{
					"name": "admin_memoryProfile",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.memoryProfile\",\n    \"params\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"admin"
							]
						},
						"description": "Runs and writes a memory profile. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#adminmemoryprofile)"
					},
					"response": []
				},
				{
					"name": "admin_lockProfile",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"admin.lockProfile\",\n    \"params\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/C/admin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"C",
								"admin"
							]
						},
						"description": "Runs a mutex profile writing to the `coreth_performance_c` directory. [More info](https://docs.avax.network/apis/avalanchego/apis/c-chain#adminlockprofile)"
					},
					"response": []
				}
			],
			"description": "This document describes the API of the C-Chain, which is an instance of the Ethereum Virtual Machine (EVM.)\n\nNote: Ethereum has its own notion of `networkID` and `chainID`. The C-Chain uses `1` and `43110` for these values, obtained using the `net_version` and `eth_chainId` methods shown below. These have no relationship to AVA’s view of networkID and chainID, and are purely internal to the C-Chain. [More info](https://docs.avax.network/v1.0/en/api/evm)"
		},
		{
			"name": "Health",
			"item": [
				{
					"name": "health",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"health.health\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/health",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"health"
							]
						},
						"description": "Get health check on this node. [More info](https://docs.avax.network/apis/avalanchego/apis/health#methods)"
					},
					"response": []
				}
			],
			"description": "This API can be used for measuring node health. [More info](https://docs.avax.network/v1.0/en/api/health)"
		},
		{
			"name": "Index",
			"item": [
				{
					"name": "X-Chain Transactions",
					"item": [
						{
							"name": "getContainerByID",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getContainerByID\",\n    \"params\": {\n        \"containerID\":\"2dGz8JSfX17QqW12pARrt2iWNhXdcpXMYPVSYRn9HrReGpMXqQ\",\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/X/tx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"X",
										"tx"
									]
								},
								"description": "Get container by ID. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetcontainerbyid)"
							},
							"response": []
						},
						{
							"name": "getContainerByIndex",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getContainerByIndex\",\n    \"params\": {\n        \"index\":0,\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/X/tx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"X",
										"tx"
									]
								},
								"description": "Get container by index. The first container accepted is at index 0, the second is at index 1, etc. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetcontainerbyindex)"
							},
							"response": []
						},
						{
							"name": "getContainerRange",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getContainerRange\",\n    \"params\": {\n        \"startIndex\":0,\n        \"numtoFetch\":10,\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/X/tx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"X",
										"tx"
									]
								},
								"description": "Returns containers with indices in \\[startIndex, startIndex+1, ... , startIndex + numToFetch - 1\\]. numToFetch must be in \\[0,1024\\] [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetcontainerrange)"
							},
							"response": []
						},
						{
							"name": "getIndex",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getIndex\",\n    \"params\": {\n        \"containerID\":\"2dGz8JSfX17QqW12pARrt2iWNhXdcpXMYPVSYRn9HrReGpMXqQ\",\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/X/tx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"X",
										"tx"
									]
								},
								"description": "Get a container's index. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetindex)"
							},
							"response": []
						},
						{
							"name": "getLastAccepted",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getLastAccepted\",\n    \"params\": {\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/X/tx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"X",
										"tx"
									]
								},
								"description": "Get the most recently accepted container. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetlastaccepted)"
							},
							"response": []
						},
						{
							"name": "isAccepted",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.isAccepted\",\n    \"params\": {\n        \"containerID\":\"2dGz8JSfX17QqW12pARrt2iWNhXdcpXMYPVSYRn9HrReGpMXqQ\",\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/X/tx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"X",
										"tx"
									]
								},
								"description": "Returns true if the container is in this index. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexisaccepted)"
							},
							"response": []
						}
					]
				},
				{
					"name": "X-Chain Vertices",
					"item": [
						{
							"name": "getContainerByID",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getContainerByID\",\n    \"params\": {\n        \"containerID\":\"8JeLjRDCojGAZXYNvLDxeU7XhKaTiMzJsSEue7d37kA1n1Htm\",\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/X/vtx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"X",
										"vtx"
									]
								},
								"description": "Get container by ID. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetcontainerbyid)"
							},
							"response": []
						},
						{
							"name": "getContainerByIndex",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getContainerByIndex\",\n    \"params\": {\n        \"index\":0,\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/X/vtx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"X",
										"vtx"
									]
								},
								"description": "Get container by index. The first container accepted is at index 0, the second is at index 1, etc. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetcontainerbyindex)"
							},
							"response": []
						},
						{
							"name": "getContainerRange",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getContainerRange\",\n    \"params\": {\n        \"startIndex\":0,\n        \"numtoFetch\":10,\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/X/vtx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"X",
										"vtx"
									]
								},
								"description": "Returns containers with indices in \\[startIndex, startIndex+1, ... , startIndex + numToFetch - 1\\]. numToFetch must be in \\[0,1024\\] [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetcontainerrange)"
							},
							"response": []
						},
						{
							"name": "getIndex",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getIndex\",\n    \"params\": {\n        \"containerID\":\"kLBLyNrBr9rjHFBScjvogspz167wrTD47SqbTsLk6YGGnjHwZ\",\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/X/vtx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"X",
										"vtx"
									]
								},
								"description": "Get a container's index. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetindex)"
							},
							"response": []
						},
						{
							"name": "getLastAccepted",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getLastAccepted\",\n    \"params\": {\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/X/vtx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"X",
										"vtx"
									]
								},
								"description": "Get the most recently accepted container. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetlastaccepted)"
							},
							"response": []
						},
						{
							"name": "isAccepted",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.isAccepted\",\n    \"params\": {\n        \"containerID\":\"kLBLyNrBr9rjHFBScjvogspz167wrTD47SqbTsLk6YGGnjHwZ\",\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/X/vtx",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"X",
										"vtx"
									]
								},
								"description": "Returns true if the container is in this index. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexisaccepted)"
							},
							"response": []
						}
					]
				},
				{
					"name": "P-Chain Blocks",
					"item": [
						{
							"name": "getContainerByID",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getContainerByID\",\n    \"params\": {\n        \"containerID\":\"8JeLjRDCojGAZXYNvLDxeU7XhKaTiMzJsSEue7d37kA1n1Htm\",\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/P/block",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"P",
										"block"
									]
								},
								"description": "Get container by ID. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetcontainerbyid)"
							},
							"response": []
						},
						{
							"name": "getContainerByIndex",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getContainerByIndex\",\n    \"params\": {\n        \"index\":0,\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/P/block",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"P",
										"block"
									]
								},
								"description": "Get container by index. The first container accepted is at index 0, the second is at index 1, etc. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetcontainerbyindex)"
							},
							"response": []
						},
						{
							"name": "getContainerRange",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getContainerRange\",\n    \"params\": {\n        \"startIndex\":0,\n        \"numtoFetch\":10,\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/P/block",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"P",
										"block"
									]
								},
								"description": "Returns containers with indices in \\[startIndex, startIndex+1, ... , startIndex + numToFetch - 1\\]. numToFetch must be in \\[0,1024\\] [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetcontainerrange)"
							},
							"response": []
						},
						{
							"name": "getIndex",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getIndex\",\n    \"params\": {\n        \"containerID\":\"4AqeFPxtTW4B5D6oR8gRZTvRKnnqkUWiV6mUNZxjUMbQKYWpi\",\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/P/block",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"P",
										"block"
									]
								},
								"description": "Get a container's index. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetindex)"
							},
							"response": []
						},
						{
							"name": "getLastAccepted",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getLastAccepted\",\n    \"params\": {\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/P/block",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"P",
										"block"
									]
								},
								"description": "Get the most recently accepted container. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetlastaccepted)"
							},
							"response": []
						},
						{
							"name": "isAccepted",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.isAccepted\",\n    \"params\": {\n        \"containerID\":\"4AqeFPxtTW4B5D6oR8gRZTvRKnnqkUWiV6mUNZxjUMbQKYWpi\",\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/P/block",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"P",
										"block"
									]
								},
								"description": "Returns true if the container is in this index. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexisaccepted)"
							},
							"response": []
						}
					]
				},
				{
					"name": "C-Chain Blocks",
					"item": [
						{
							"name": "getContainerByID",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getContainerByID\",\n    \"params\": {\n        \"containerID\":\"8JeLjRDCojGAZXYNvLDxeU7XhKaTiMzJsSEue7d37kA1n1Htm\",\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/C/block",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"C",
										"block"
									]
								},
								"description": "Get container by ID. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetcontainerbyid)"
							},
							"response": []
						},
						{
							"name": "getContainerByIndex",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getContainerByIndex\",\n    \"params\": {\n        \"index\":0,\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/C/block",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"C",
										"block"
									]
								},
								"description": "Get container by index. The first container accepted is at index 0, the second is at index 1, etc. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetcontainerbyindex)"
							},
							"response": []
						},
						{
							"name": "getContainerRange",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getContainerRange\",\n    \"params\": {\n        \"startIndex\":0,\n        \"numtoFetch\":10,\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/C/block",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"C",
										"block"
									]
								},
								"description": "Returns containers with indices in \\[startIndex, startIndex+1, ... , startIndex + numToFetch - 1\\]. numToFetch must be in \\[0,1024\\] [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetcontainerrange)"
							},
							"response": []
						},
						{
							"name": "getIndex",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getIndex\",\n    \"params\": {\n        \"containerID\":\"4AqeFPxtTW4B5D6oR8gRZTvRKnnqkUWiV6mUNZxjUMbQKYWpi\",\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/C/block",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"C",
										"block"
									]
								},
								"description": "Get a container's index. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetindex)"
							},
							"response": []
						},
						{
							"name": "getLastAccepted",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.getLastAccepted\",\n    \"params\": {\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/C/block",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"C",
										"block"
									]
								},
								"description": "Get the most recently accepted container. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexgetlastaccepted)"
							},
							"response": []
						},
						{
							"name": "isAccepted",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"index.isAccepted\",\n    \"params\": {\n        \"containerID\":\"4AqeFPxtTW4B5D6oR8gRZTvRKnnqkUWiV6mUNZxjUMbQKYWpi\",\n        \"encoding\":\"hex\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/ext/index/C/block",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"ext",
										"index",
										"C",
										"block"
									]
								},
								"description": "Returns true if the container is in this index. [More info](https://docs.avax.network/apis/avalanchego/apis/index-api#indexisaccepted)"
							},
							"response": []
						}
					]
				}
			],
			"description": "This API can be used to query data from AvalancheGo's database. The Index API is only available when node is run with --index-enabled option."
		},
		{
			"name": "Info",
			"item": [
				{
					"name": "isBootstrapped",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.isBootstrapped\",\n    \"params\": {\n        \"chain\": \"X\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/info",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"info"
							]
						},
						"description": "Check whether a given chain is done bootstrapping. [More info](https://docs.avax.network/apis/avalanchego/apis/info#infoisbootstrapped)"
					},
					"response": []
				},
				{
					"name": "getBlockchainID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getBlockchainID\",\n    \"params\": {\n        \"alias\":\"X\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/info",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"info"
							]
						},
						"description": "Given a blockchain’s alias, get its ID. [More info](https://docs.avax.network/apis/avalanchego/apis/info#infogetblockchainid)"
					},
					"response": []
				},
				{
					"name": "getNetworkID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getNetworkID\",\n    \"params\" :{\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/info",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"info"
							]
						},
						"description": "Get the ID of the network this node is participating in. [More info](https://docs.avax.network/apis/avalanchego/apis/info#infogetnetworkid)"
					},
					"response": []
				},
				{
					"name": "getNetworkName",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getNetworkName\",\n    \"params\" :{\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/info",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"info"
							]
						},
						"description": "Get the name of the network this node is participating in. [More info](https://docs.avax.network/apis/avalanchego/apis/info#infogetnetworkname)"
					},
					"response": []
				},
				{
					"name": "getNodeID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getNodeID\",\n    \"params\" :{\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/info",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"info"
							]
						},
						"description": "Get the name of the network this node is participating in. [More info](https://docs.avax.network/apis/avalanchego/apis/info#infogetnodeid)"
					},
					"response": []
				},
				{
					"name": "getNodeIP",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getNodeIP\",\n    \"params\" :{\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/info",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"info"
							]
						},
						"description": "Get the IP of this node. [More info](https://docs.avax.network/apis/avalanchego/apis/info#infogetnodeip)"
					},
					"response": []
				},
				{
					"name": "getNodeVersion",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getNodeVersion\",\n    \"params\" :{\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/info",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"info"
							]
						},
						"description": "Get the version of this node. [More info](https://docs.avax.network/apis/avalanchego/apis/info#infogetnodeversion)"
					},
					"response": []
				},
				{
					"name": "getTxFee",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getTxFee\",\n    \"params\": {\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/info",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"info"
							]
						},
						"description": "Get the transaction fee of the network. [More info](https://docs.avax.network/apis/avalanchego/apis/info#infogettxfee)"
					},
					"response": []
				},
				{
					"name": "getVMs",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.getVMs\",\n    \"params\": {\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/info",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"info"
							]
						},
						"description": "Get the virtual machines installed on this node. [More info](https://docs.avax.network/apis/avalanchego/apis/info#infogetvms)"
					},
					"response": []
				},
				{
					"name": "peers",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.peers\",\n    \"params\" :{\n        \"nodeIDs\": []\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/info",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"info"
							]
						},
						"description": "Get description of peer connections. [More info](https://docs.avax.network/apis/avalanchego/apis/info#infopeers)"
					},
					"response": []
				},
				{
					"name": "uptime",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"info.uptime\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/info",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"info"
							]
						},
						"description": "Returns the network's observed uptime of this node. [More info](https://docs.avax.network/apis/avalanchego/apis/info#infouptime)"
					},
					"response": []
				}
			],
			"description": "This API can be used to access basic information about the node."
		},
		{
			"name": "IPC",
			"item": [
				{
					"name": "publishBlockchain - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ipcs.publishBlockchain\",\n    \"params\":{\n        \"blockchainID\":\"{{avalanceBlockchainId}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/ipcs",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"ipcs"
							]
						},
						"description": "Register a blockchain so it publishes accepted vertices to a Unix domain socket. [More info](https://docs.avax.network/apis/avalanchego/apis/ipc#ipcspublishblockchain)"
					},
					"response": []
				},
				{
					"name": "unpublishBlockchain - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"ipcs.unpublishBlockchain\",\n    \"params\":{\n        \"blockchainID\":\"{{avalanceBlockchainId}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/ipcs",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"ipcs"
							]
						},
						"description": "Deregister a blockchain so that it no longer publishes to a Unix domain socket. [More info](https://docs.avax.network/apis/avalanchego/apis/ipc#ipcsunpublishblockchain)"
					},
					"response": []
				}
			],
			"description": "The IPC API allows users to create a UNIX domain socket for a blockchain to publish to. When the blockchain accepts a vertex/block it will publish the vertex to the socket.\n\nA node will only expose this API if it is started with command-line argument `api-ipcs-enabled=true`. [More info](https://docs.avax.network/v1.0/en/api/ipc/)"
		},
		{
			"name": "Keystore",
			"item": [
				{
					"name": "createUser - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"keystore.createUser\",\n    \"params\" :{\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/keystore",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"keystore"
							]
						},
						"description": "Create a new user with the specified username and password. [More info](https://docs.avax.network/apis/avalanchego/apis/keystore#keystorecreateuser)"
					},
					"response": []
				},
				{
					"name": "deleteUser - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"keystore.deleteUser\",\n    \"params\" : {\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/keystore",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"keystore"
							]
						},
						"description": "Delete a user. [More info](https://docs.avax.network/apis/avalanchego/apis/keystore#keystoredeleteuser)"
					},
					"response": []
				},
				{
					"name": "exportUser  - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"method\": \"keystore.exportUser\",\n    \"params\": {\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\",\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/keystore",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"keystore"
							]
						},
						"description": "Export a user. The user can be imported to another node with `keystore.importUser`. The user’s password remains encrypted. [More info](https://docs.avax.network/apis/avalanchego/apis/keystore#keystoreexportuser)"
					},
					"response": []
				},
				{
					"name": "importUser - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"keystore.importUser\",\n    \"params\" :{\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\",\n        \"user\"    :\"0x0000b79e54bb3452985874844fd02ce47671725850111b14d5b06d4b3e142ec852b39d1be2bdead684977bc0a1bfa6eeb06e000000040000004066687aadf862bd776c8fc18b8e9f8e20089714856ee233b3902a591d0d5f292500000000000000000000000000000000000000000000000000000000000000000000004c00000000002a92a15386259d71410fe602a9a1e2207a7afae3efd8d86f142577405476e5337a0736ba095b0fe911cb3100000018226dc5aec589008bc87ce142d5488d942f7e9d37374be99f0000003466687aadf862bd776c8fc18b8e9f8e20089714856ee233b3902a591d0d5f29253cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c00000052000000000030b46ad90c1ef2f22282a9ab9c045cf190506148a7afcf4e94360e7e4109ef9abbc4aa97dd84533a5b081c0da489e205f00000001825e30947b222849b4f69b0a1eaf1dd49c82f5b64995d3c4e00000040faa57ee922f01eb75ca224d2e8aaf9cb60973d011e0ac08c7b3798c3aacf79de00000000000000000000000000000000000000000000000000000000000000000000004c00000000002a098545758bbf938acd508762ffff24bd2e8e0f80313fb0957c51fea30df6f304a94568c30dfb06257deb00000018e722d87e7d5964aa8a8772b0985d0723d398681ef29fad7900000034faa57ee922f01eb75ca224d2e8aaf9cb60973d011e0ac08c7b3798c3aacf79de3cb7d3842e8cee6a0ebd09f1fe884f6861e1b29c00000052000000000030722156f457680f16cf010d7cb3b350aaf210ae9ed58aaf89017f0046c5380ddf76fb944a6ff9a287a6a6e6c6303c751a000000183edfb66b8b01e6197507cde7e4909f816d3accf753155f96b346b48c\",\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/keystore",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"keystore"
							]
						},
						"description": "Import a user. `password` must match the user’s password. `username` doesn’t have to match the username `user` had when it was exported. [More info](https://docs.avax.network/apis/avalanchego/apis/keystore#keystoreimportuser)"
					},
					"response": []
				},
				{
					"name": "listUsers - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"keystore.listUsers\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/keystore",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"keystore"
							]
						},
						"description": "List the users in this keystore. [More info](https://docs.avax.network/apis/avalanchego/apis/keystore#keystorelistusers)"
					},
					"response": []
				}
			],
			"description": "Every node has a built-in keystore. Clients create users on the keystore, which act as identities to be used when interacting with blockchains. A keystore exists at the node level, so if you create a user on a node it exists only on that node. However, users may be imported and exported using this API. \n\n**You should only create a keystore user on a node that you operate, as the node operator has access to your plaintext password.**\n\n[More info](https://docs.avax.network/v1.0/en/api/keystore)"
		},
		{
			"name": "Metrics",
			"item": [
				{
					"name": "metrics",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURL}}/ext/metrics",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"metrics"
							]
						},
						"description": "To get the node metrics. [More info](https://docs.avax.network/apis/avalanchego/apis/metrics)"
					},
					"response": []
				}
			],
			"description": "The API allows clients to get statistics about a node’s health and performance. [More info](https://docs.avax.network/v1.0/en/api/metrics/)"
		},
		{
			"name": "PlatformVM",
			"item": [
				{
					"name": "addDelegator - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.addDelegator\",\n    \"params\": {\n        \"nodeId\":\"{{avalancheNodeId}}\",\n        \"startTime\":1613347036,\n        \"endTime\":1631215800,\n        \"stakeAmount\":200000000000,\n        \"rewardAddress\": \"{{pchainAddress}}\",\n        \"from\": [\"{{pchainAddress}}\"],\n        \"changeAddr\": \"{{pchainAddress}}\",\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Add a delegator to the Default Subnet.\n\nA delegator stakes AVAX and specifies a validator (the delegatee) to validate on their behalf. The delegatee has an increased probability of being sampled by other validators (weight) in proportion to the stake delegated to them.\n\nThe delegatee charges a fee to the delegator; the former receives a percentage of the delegator’s validation reward (if any.)\n\nThe delegation period must be a subset of the perdiod that the delegatee validates the Default Subnet. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformadddelegator)"
					},
					"response": []
				},
				{
					"name": "addSubnetValidator - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.addSubnetValidator\",\n    \"params\": {\n        \"nodeID\":\"{{avalancheNodeId}}\",\n        \"subnetID\":\"{{avalancheSubnetId}}\",\n        \"startTime\":1625782598,\n        \"endTime\":1627078419,\n        \"weight\":20,\n        \"from\": [\"{{pchainAddress}}\"],\n        \"changeAddr\": \"{{pchainAddress}}\",\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Add a validator to a Subnet other than the Default Subnet. The validator must validate the Default Subnet for the entire duration they validate this Subnet. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformaddsubnetvalidator)"
					},
					"response": []
				},
				{
					"name": "addValidator - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.addValidator\",\n    \"params\": {\n        \"nodeID\":\"{{avalancheNodeId}}\",\n        \"startTime\":1606245174,\n        \"endTime\":1608837056,\n        \"stakeAmount\":2000000000000,\n        \"rewardAddress\": \"{{pchainAddress}}\",\n        \"delegationFeeRate\":10,\n        \"from\": [\"{{pchainAddress}}\"],\n        \"changeAddr\": \"{{pchainAddress}}\",\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Add a validator to the Default Subnet. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformaddvalidator)"
					},
					"response": []
				},
				{
					"name": "createAddress - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.createAddress\",\n    \"params\": {\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Add a delegator to the Default Subnet.\n\nA delegator stakes AVAX and specifies a validator (the delegatee) to validate on their behalf. The delegatee has an increased probability of being sampled by other validators (weight) in proportion to the stake delegated to them.\n\nThe delegatee charges a fee to the delegator; the former receives a percentage of the delegator’s validation reward (if any.)\n\nThe delegation period must be a subset of the perdiod that the delegatee validates the Default Subnet. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformcreateaddress)"
					},
					"response": []
				},
				{
					"name": "createBlockchain - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.createBlockchain\",\n    \"params\" : {\n        \"vmID\":\"avm\",\n        \"SubnetID\":\"{{avalancheSubnetId}}\",\n        \"name\":\"My new avm\",\n        \"genesisData\": \"111115LHK2ZCYttSKPmmhsTDSuKiCkmHz65nUS1YqybvjirwGLLt376k1RwnTt72WobPqrG7rmgrKVqSq6VxDsKXYGnRmfhdLCEhsYjM\",\n        \"encoding\": \"hex\",\n        \"from\": [\"{{pchainAddress}}\"],\n        \"changeAddr\": \"{{pchainAddress}}\",\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Create a new blockchain. Currently only supports creation of new instances of the AVM and the Timestamp VM. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformcreateblockchain)"
					},
					"response": []
				},
				{
					"name": "createSubnet - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.createSubnet\",\n    \"params\": {\n        \"controlKeys\":[\n            \"{{pchainAddress}}\"\n        ],\n        \"threshold\":1,\n        \"from\": [\"{{pchainAddress}}\"],\n        \"changeAddr\":\"{{pchainAddress}}\",\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Create an unsigned transaction to create a new Subnet.\n\nThe unsigned transaction must be signed with the key of the account paying the transaction fee.\n\nThe Subnet’s ID is the ID of the transaction that creates it (ie the response from `issueTx` when issuing the signed transaction. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformcreatesubnet)"
					},
					"response": []
				},
				{
					"name": "exportAVAX - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.exportAVAX\",\n    \"params\": {\n        \"to\":\"{{xchainAddress}}\",\n        \"amount\":54321,\n        \"from\": [\"{{pchainAddress}}\"],\n        \"changeAddr\": \"{{pchainAddress}}\",\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Send AVAX from an account on the C-Chain to an address on the X-Chain.  \nThis transaction must be signed with the key of the account that the AVAX is sent from and which pays the transaction fee.  \nAfter issuing this transaction, you must call the X-Chain’s `importAVA` method to complete the transfer. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformexportavax)"
					},
					"response": []
				},
				{
					"name": "exportKey - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.exportKey\",\n    \"params\" :{\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\",\n        \"address\": \"{{pchainAddress}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Get the private key that controls a given address.  \nThe returned private key can be added to a user with `platform.importKey`. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformexportkey)"
					},
					"response": []
				},
				{
					"name": "getBalance - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getBalance\",\n    \"params\" :{\n      \"addresses\":[\"{{pchainAddress}}\"]    \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Get the balance of an asset controlled by a given address. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetbalance)"
					},
					"response": []
				},
				{
					"name": "getBlock",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.getBlock\",\n    \"params\": {\n        \"blockID\": \"{{blockID}}\",\n        \"encoding\": \"hex\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Get a block by its ID. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetblock)"
					},
					"response": []
				},
				{
					"name": "getBlockchains - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.getBlockchains\",\n    \"params\": {},\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Get all the blockchains that exist (excluding the P-Chain). [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetblockchains)"
					},
					"response": []
				},
				{
					"name": "getBlockchainStatus",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.getBlockchainStatus\",\n    \"params\":{\n        \"blockchainID\":\"{{avalanceBlockchainId}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Get the status of a blockchain. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetblockchainstatus)"
					},
					"response": []
				},
				{
					"name": "getCurrentSupply",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getCurrentSupply\",\n    \"params\": {\n        \"subnetID\": \"{{avalancheSubnetId}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Returns an upper bound on the number of AVAX that exist. This is an upper bound because it does not account for burnt tokens, including transaction fees. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetcurrentsupply)"
					},
					"response": []
				},
				{
					"name": "getCurrentValidators",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.getCurrentValidators\",\n    \"params\": {\n        \"subnetID\":null,\n        \"nodeIDs\":[]\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "List the current validators of the given Subnet. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetcurrentvalidators)"
					},
					"response": []
				},
				{
					"name": "getHeight",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getHeight\",\n    \"params\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Returns the height of the last accepted block [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetheight)"
					},
					"response": []
				},
				{
					"name": "getMaxStakeAmount - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.getMaxStakeAmount\",\n    \"params\": {\n        \"subnetID\":\"\",\n        \"nodeID\":\"\",\n        \"startTime\": 123,\n        \"endTime\": 321\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "List the current validators of the given Subnet. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetmaxstakeamount)"
					},
					"response": []
				},
				{
					"name": "getMinStake",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getMinStake\",\n    \"params\": {\n        \"subnetID\": \"{{avalancheSubnetId}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Returns the minimum stake amount [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetminstake)"
					},
					"response": []
				},
				{
					"name": "getPendingValidators",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.getPendingValidators\",\n    \"params\": {\n        \"subnetID\": null,\n        \"nodeIDs\": []\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "List the validators in the pending validator set of the specified Subnet. Each validator is not currently validating the Subnet but will in the future. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetpendingvalidators)"
					},
					"response": []
				},
				{
					"name": "getRewardUTXOs - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getRewardUTXOs\",\n    \"params\" :{\n        \"txID\":\"2nmH8LithVbdjaXsxVQCQfXtzN9hBbmebrsaEYnLM9T32Uy2Y4\",\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Returns the UTXOs that were rewarded after the provided transaction's staking or delegation period ended. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetrewardutxos)"
					},
					"response": []
				},
				{
					"name": "getStake - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getStake\",\n    \"params\": {\n        \"addresses\": [\"{{pchainAddress}}\"],\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Returns the staked amount for an array of addresses [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetstake)"
					},
					"response": []
				},
				{
					"name": "getStakingAssetID",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getStakingAssetID\",\n    \"params\": {\n        \"subnetID\": \"{{avalancheSubnetId}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Retrieve an assetID for a subnet’s staking asset. Currently this always returns the Primary Network’s staking assetID. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetstakingassetid)"
					},
					"response": []
				},
				{
					"name": "getSubnets - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.getSubnets\",\n    \"params\": {\n        \"ids\": [\"{{avalancheSubnetId}}\"]\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Get all the Subnets that exist. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetsubnets)"
					},
					"response": []
				},
				{
					"name": "getTimestamp",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getTimestamp\",\n    \"params\" :{}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Returns the specified transaction [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgettimestamp)"
					},
					"response": []
				},
				{
					"name": "getTotalStake",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getTotalStake\",\n    \"params\": {\n        \"subnetID\": \"{{avalancheSubnetId}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Get the total amount of nAVAX staked on the Primary Network. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgettotalstake)"
					},
					"response": []
				},
				{
					"name": "getTx",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getTx\",\n    \"params\" :{\n        \"txID\":\"Cy7cZUot6DCUUDz1VuA2C7vFVWSzW3DgLhYXUAiLWH8BKafbH\",\n        \"encoding\": \"hex\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Returns the specified transaction [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgettx)"
					},
					"response": []
				},
				{
					"name": "getTxStatus",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getTxStatus\",\n    \"params\" :{\n        \"txID\":\"2C3AVShejyq6mLhEXvEGCnpaQi8tRwudBhSbT34hFiytffEFoe\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Returns the specified transaction [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgettxstatus)"
					},
					"response": []
				},
				{
					"name": "getUTXOs",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getUTXOs\",\n    \"params\" :{\n        \"addresses\":[\"{{pchainAddress}}\"],\n        \"sourceChain\": \"P\",\n        \"limit\": 5,\n        \"encoding\": \"hex\",\n        \"startIndex\": {\n            \"address\": \"{{pchainAddress}}\",\n            \"utxo\": \"LUC1cmcxnfNR9LdkACS2ccGKLEK7SYqB4gLLTycQfg1koyfSq\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Get the UTXOs that reference a given address. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetutxos)"
					},
					"response": []
				},
				{
					"name": "getValidatorsAt",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.getValidatorsAt\",\n    \"params\" :{\n        \"height\": 0,\n        \"subnetID\": \"{{avalancheSubnetId}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Get the validators and their weights of a subnet or the Primary Network at a given P-Chain height. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformgetvalidatorsat)"
					},
					"response": []
				},
				{
					"name": "importAVAX - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.importAVAX\",\n    \"params\": {\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\",\n        \"sourceChain\": \"X\",\n        \"to\":\"{{pchainAddress}}\",\n        \"from\": [\"{{pchainAddress}}\"],\n        \"changeAddr\": \"{{pchainAddress}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Complete a transfer of AVAX from the X-Chain to the C-Chain.\n\nBefore this method is called, you must call the X-Chain’s `exportAVAX` method to initiate the transfer. [More Info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformimportavax)"
					},
					"response": []
				},
				{
					"name": "importKey - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.importKey\",\n    \"params\" :{\n        \"username\":\"{{avalancheUsername}}\",\n        \"password\":\"{{avalanchePassword}}\",\n        \"privateKey\":\"{{privkey}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Give a user control over an address by providing the private key that controls the address. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformimportkey)"
					},
					"response": []
				},
				{
					"name": "issueTx",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.issueTx\",\n    \"params\": {\n        \"tx\":\"0x00\",\n        \"encoding\": \"hex\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Issue a transaction to the Platform Chain. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformissuetx)"
					},
					"response": []
				},
				{
					"name": "listAddresses - DEPRECATED",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "//Deprecated as of v1.9.12.\n\n\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.listAddresses\",\n    \"params\": {\n        \"username\": \"{{avalancheUsername}}\",\n        \"password\": \"{{avalanchePassword}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "List the addresses controlled by the given user. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformlistaddresses)"
					},
					"response": []
				},
				{
					"name": "sampleValidators",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\":\"2.0\",\n    \"id\"     :1,\n    \"method\" :\"platform.sampleValidators\",\n    \"params\" :{\n        \"size\":2\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Sample validators from the specified Subnet. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformsamplevalidators)"
					},
					"response": []
				},
				{
					"name": "validatedBy",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.validatedBy\",\n    \"params\": {\n        \"blockchainID\": \"{{avalanceBlockchainId}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Get the Subnet that validates a given blockchain. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformvalidatedby)"
					},
					"response": []
				},
				{
					"name": "validates",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"platform.validates\",\n    \"params\": {\n        \"subnetID\":\"{{avalancheSubnetId}}\"\n    },\n    \"id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/ext/bc/P",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ext",
								"bc",
								"P"
							]
						},
						"description": "Get the IDs of the blockchains a Subnet validates. [More info](https://docs.avax.network/apis/avalanchego/apis/p-chain#platformvalidates)"
					},
					"response": []
				}
			],
			"description": "This API allows clients to interact with the P-Chain (Platform Chain), which maintains Avalanche’s validator set and handles blockchain creation. [More info](https://docs.avax.network/v1.0/en/api/platform)"
		}
	]
}